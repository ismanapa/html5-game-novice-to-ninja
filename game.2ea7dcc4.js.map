{"version":3,"sources":["gamelib/utils/Vec.ts","gamelib/entities/Entity.ts","gamelib/behaviours/ContainerUpdateBehaviour.ts","gamelib/entities/EntityTypeEnum.ts","gamelib/entities/Container.ts","gamelib/renderer/EntityRenderes/EntityCanvasRenderer.ts","gamelib/renderer/EntityRenderes/TextCanvasRenderer.ts","gamelib/renderer/EntityRenderes/SpriteCanvasRenderer.ts","gamelib/renderer/EntityRenderes/TileSpriteCanvasRenderer.ts","gamelib/renderer/EntityRenderes/RectCanvasRenderer.ts","gamelib/renderer/EntityRenderes/ContainerRenderer.ts","gamelib/renderer/EntityRenderes/index.ts","gamelib/renderer/CanvasRenderer.ts","gamelib/Assets.ts","gamelib/entities/Texture.ts","gamelib/entities/Sprite.ts","gamelib/entities/Text.ts","gamelib/entities/Rect.ts","gamelib/controls/KeyControls.ts","gamelib/controls/MouseControls.ts","gamelib/game.ts","gamelib/utils/math.ts","gamelib/utils/entity.ts","gamelib/behaviours/AnimManagerBehaviour.ts","gamelib/behaviours/AnimBehaviour.ts","gamelib/AnimManager.ts","gamelib/entities/TileSprite.ts","gamelib/entities/TileMap.ts","gamelib/behaviours/CameraBehaviour.ts","gamelib/entities/Camera.ts","gamelib/movement/deadInTracks.ts","gamelib/movement/wallSlide.ts","gamelib/State.ts","gamelib/utils/physics.ts","gamelib/sounds/Sound.ts","gamelib/sounds/SoundPool.ts","gamelib/sounds/SoungGroup.ts","gamelib/index.ts","../node_modules/easystarjs/src/instance.js","../node_modules/easystarjs/src/node.js","../node_modules/heap/lib/heap.js","../node_modules/heap/index.js","../node_modules/easystarjs/src/easystar.js","chapter05/Level.ts","chapter05/entities/PlayerBehaviour.ts","chapter05/entities/Player.ts","chapter05/entities/Pickup.ts","chapter05/entities/BatBehaviour.ts","chapter05/entities/Bat.ts","chapter05/entities/BulletBehaviour.ts","chapter05/entities/Bullet.ts","chapter05/entities/TotamBehaviour.ts","chapter05/entities/Totem.ts","chapter05/entities/Ghost.ts","chapter05/GameScreen.ts","chapter05/game.ts"],"names":[],"mappings":";AACa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAQE,SAAA,EAAY,EAAe,QAAf,IAAA,IAAA,EAAA,QAAe,IAAA,IAAA,EAAA,GACpB,KAAA,EAAI,EACJ,KAAA,EAAI,EA4Db,OAlES,EAAA,KAAP,SAAY,GACH,OAAA,IAAI,GAAM,KAAK,IAQxB,EAAA,UAAA,IAAA,WACQ,IAAE,EAAF,KAAE,EAAG,EAAL,KAAK,EACJ,OAAA,KAAK,KAAK,EAAI,EAAI,EAAI,IAG/B,EAAA,UAAA,IAAA,SAAI,EAAW,GAGN,OAFF,KAAA,EAAI,EACJ,KAAA,EAAI,EACF,MAGT,EAAA,UAAA,KAAA,SAAK,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAGD,OAFF,KAAA,EAAI,EACJ,KAAA,EAAI,EACF,MAGT,EAAA,UAAA,IAAA,SAAI,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAGA,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,SAAA,SAAS,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAGL,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,SAAA,SAAS,GAGA,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,OAAA,SAAO,GAGE,OAFF,KAAA,GAAK,EACL,KAAA,GAAK,EACH,MAGT,EAAA,UAAA,MAAA,WACS,OAAA,EAAI,KAAK,OAGlB,EAAA,UAAA,UAAA,WACQ,IAAA,EAAM,KAAK,MAKV,OAJH,EAAM,IACH,KAAA,GAAK,EACL,KAAA,GAAK,GAEL,MAGT,EAAA,UAAA,IAAA,SAAI,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EACA,OAAA,KAAK,EAAI,EAAI,KAAK,EAAI,GAEjC,EAtEA,GAAa,QAAA,IAAA;;ACIS,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFtB,IAAA,EAAA,QAAA,gBAEA,EAAA,WAkBE,SAAA,IACO,KAAA,IAAM,IAAI,EAAA,IACV,KAAA,SAAU,EAgBnB,OAbE,EAAA,UAAA,OAAA,SAAO,EAAY,GACb,KAAK,iBACF,KAAA,gBAAgB,OAAO,EAAI,EAAG,OAIvC,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,IAAM,GAGb,EAAA,UAAA,UAAA,SAAU,GACH,KAAA,KAAO,GAEhB,EApCA,GAAsB,QAAA,OAAA;;ACFT,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAWA,OAVE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GACtB,IAAA,EAAW,EAAO,SAAS,OAAO,SAAA,GAI/B,OAHH,EAAM,iBAAmB,EAAM,SACjC,EAAM,OAAO,EAAI,IAEX,EAAM,OAGhB,EAAO,YAAY,IAEvB,EAXA,GAAa,QAAA,yBAAA;;ACHb,aAAA,IAAY,EAAZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,SAAY,GACV,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,QAAA,GAAA,UACA,EAAA,EAAA,UAAA,GAAA,YACA,EAAA,EAAA,WAAA,GAAA,aACA,EAAA,EAAA,KAAA,GAAA,OANF,CAAY,EAAA,QAAA,aAAA,QAAA,WAAU;;ACKT,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,IAAA,EAAA,QAAA,4BACA,EAAA,QAAA,gDACA,EAAA,QAAA,oBAGA,EAAA,SAAA,GAKE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KANE,OAOT,EAAK,SAAW,GAChB,EAAK,KAAO,EAAA,WAAW,UACvB,EAAK,gBAAkB,IAAI,EAAA,yBATlB,EA6Bb,OA7B+B,EAAA,EAAA,GAY7B,EAAA,UAAA,IAAA,SAAsB,GAEb,OADF,KAAA,SAAS,KAAK,GACZ,GAGT,EAAA,UAAA,OAAA,SAAO,GAEE,OADF,KAAA,SAAW,KAAK,SAAS,OAAO,SAAA,GAAK,OAAA,IAAM,IACzC,GAGT,EAAA,UAAA,YAAA,SAAY,GACL,KAAA,SAAW,GAGlB,EAAA,UAAA,IAAA,SAAI,GACK,OAAA,KAAK,SAAS,IAAI,IAE7B,EA7BA,CAA+B,EAAA,QAAlB,QAAA,UAAA;;ACFS,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAtB,IAAA,EAAA,WAGA,OAHA,aAAA,GAAsB,QAAA,qBAAA;;ACCT,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,0BACA,EAAA,QAAA,oCAEA,EAAA,SAAA,GACE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KAFE,OAGT,EAAK,WAAa,EAAA,WAAW,KAHpB,EAab,OAbwC,EAAA,EAAA,GAMtC,EAAA,UAAA,OAAA,SAAO,EAA+B,GAC9B,IAAA,EAAA,EAAA,MAAE,EAAA,EAAA,KAAM,EAAA,EAAA,KAAM,EAAA,EAAA,MAChB,IAAM,EAAI,KAAO,GACjB,IAAM,EAAI,UAAY,GACtB,IAAO,EAAI,UAAY,GAC3B,EAAI,SAAS,EAAO,KAAM,EAAG,IAEjC,EAbA,CAAwC,EAAA,sBAA3B,QAAA,mBAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,0BACA,EAAA,QAAA,oCAEA,EAAA,SAAA,GACE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KAFE,OAGT,EAAK,WAAa,EAAA,WAAW,OAHpB,EAkBb,OAlB0C,EAAA,EAAA,GAMxC,EAAA,UAAA,OAAA,SAAO,EAA+B,GAGhC,GAFA,EAAO,QAAQ,EAAI,UAAU,EAAO,OAAO,EAAG,EAAO,OAAO,GAC5D,EAAO,OAAO,EAAI,MAAM,EAAO,MAAM,EAAG,EAAO,MAAM,GACrD,EAAO,SAAU,CACb,IAAA,EAAK,EAAO,MAAQ,EAAO,MAAM,EAAI,EACrC,EAAK,EAAO,MAAQ,EAAO,MAAM,EAAI,EAC3C,EAAI,UAAU,EAAI,GAClB,EAAI,OAAO,EAAO,UAClB,EAAI,WAAW,GAAK,GAEtB,EAAI,UAAU,EAAO,QAAQ,IAAK,EAAG,IAEzC,EAlBA,CAA0C,EAAA,sBAA7B,QAAA,qBAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,0BACA,EAAA,QAAA,oCAGA,EAAA,SAAA,GACE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KAFE,OAGT,EAAK,WAAa,EAAA,WAAW,WAHpB,EAiBb,OAjB8C,EAAA,EAAA,GAM5C,EAAA,UAAA,OAAA,SAAO,EAA+B,GAC5B,IAAA,EAAA,EAAA,QAAA,IACR,EAAI,UACF,EACA,EAAO,MAAM,EAAI,EAAO,MACxB,EAAO,MAAM,EAAI,EAAO,MACxB,EAAO,MAAO,EAAO,MAJvB,EAKK,EACH,EAAO,MAAO,EAAO,QAG3B,EAjBA,CAA8C,EAAA,sBAAjC,QAAA,yBAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,0BAEA,EAAA,QAAA,oCAEA,EAAA,SAAA,GACE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KAFE,OAGT,EAAK,WAAa,EAAA,WAAW,KAHpB,EAUb,OAVwC,EAAA,EAAA,GAMtC,EAAA,UAAA,OAAA,SAAO,EAA+B,GACpC,EAAI,UAAY,EAAO,MAAM,KAC7B,EAAI,SAAS,EAAG,EAAG,EAAO,EAAG,EAAO,IAExC,EAVA,CAAwC,EAAA,sBAA3B,QAAA,mBAAA;;ACAA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,0BACA,EAAA,QAAA,oCAGA,EAAA,SAAA,GACE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,OAAO,KAFE,OAGT,EAAK,WAAa,EAAA,WAAW,UAHpB,EAmBb,OAnBuC,EAAA,EAAA,GAMrC,EAAA,UAAA,OAAA,SAAO,EAA+B,GAChC,GAAA,EAAO,KAAM,CACT,IAAA,EAAA,EAAA,KAAC,EAAA,EAAA,GAAM,EAAA,EAAA,MAAA,GACT,EAAO,KAAK,OAAS,IACvB,EAAI,UAAY,EAAO,MAAM,MAAQ,OACrC,EAAI,YACJ,EAAI,OAAO,EAAK,EAAG,EAAK,GACxB,EAAK,QAAQ,SAAC,GAAE,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAQ,OAAA,EAAI,OAAO,EAAG,KACzC,EAAI,YACJ,EAAI,UAIZ,EAnBA,CAAuC,EAAA,sBAA1B,QAAA,kBAAA;;ACCb,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALA,EAAA,QAAA,2BACA,EAAA,QAAA,yBACA,EAAA,QAAA,2BACA,EAAA,QAAA,+BACA,EAAA,QAAA,yBACA,EAAA,QAAA;;ACKa,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVb,IAAA,EAAA,QAAA,+BACA,EAAA,QAAA,oBASA,EAAA,WAOE,SAAA,EAAY,EAAW,GACf,IAAA,EAAS,SAAS,cAAc,UACtC,EAAO,MAAQ,EACf,EAAO,OAAS,EACX,KAAA,EAAI,EACJ,KAAA,EAAI,EACJ,KAAA,KAAO,EACP,KAAA,IAAM,EAAO,WAAW,MACxB,KAAA,IAAI,uBAAwB,EAC5B,KAAA,IAAI,aAAe,MAEnB,KAAA,SAAW,CACd,IAAI,EAAA,mBACJ,IAAI,EAAA,qBACJ,IAAI,EAAA,yBACJ,IAAI,EAAA,mBACJ,IAAI,EAAA,mBAmDV,OA/CE,EAAA,UAAA,OAAA,SAAO,EAAsB,GACvB,QADuB,IAAA,IAAA,GAAA,IACD,IAAtB,EAAU,QAAV,CAGE,IAAE,EAAF,KAAE,IAAK,EAAP,KAAO,SAqCT,GACF,EAAI,UAAU,EAAG,EAAG,KAAK,EAAG,KAAK,GApC1B,SAAA,EAAU,GAEjB,EAAK,SAAS,QAAQ,SAAA,GAChB,IAAkB,IAAlB,EAAM,QAAN,CAWA,GARJ,EAAI,OAGA,EAAM,KACR,EAAI,UAAU,KAAK,MAAM,EAAM,IAAI,GAAI,KAAK,MAAM,EAAM,IAAI,IAE1D,EAAM,QAAQ,EAAI,UAAU,EAAM,OAAO,EAAG,EAAM,OAAO,GACzD,EAAM,OAAO,EAAI,MAAM,EAAM,MAAM,EAAG,EAAM,MAAM,GAClD,EAAM,SAAU,CACZ,IAAA,EAAK,EAAM,MAAQ,EAAM,MAAM,EAAI,EACnC,EAAK,EAAM,MAAQ,EAAM,MAAM,EAAI,EACzC,EAAI,UAAU,EAAI,GAClB,EAAI,OAAO,EAAM,UACjB,EAAI,WAAW,GAAK,GAGhB,IAAA,EAAW,EAAS,KAAK,SAAA,GAAK,OAAA,EAAE,aAAe,EAAM,OACvD,GACF,EAAS,OAAO,EAAK,GAInB,aAAiB,EAAA,WACnB,EAAU,GAEZ,EAAI,aAQR,CAAU,KAEd,EA1EA,GAAa,QAAA,eAAA;;ACmCA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7Cb,IAAM,EAAgC,GAChC,EAAwB,GACxB,EAA2B,GAE7B,GAAY,EACZ,EAAY,EACZ,EAAQ,EAEZ,SAAS,IACP,GAAY,EACZ,EAAe,QAAQ,SAAA,GAAM,OAAA,MAI/B,SAAS,EAAY,GACf,EACF,QAAQ,KAAK,wCAAyC,EAAE,SAI1D,IACA,EAAkB,QAAQ,SAAA,GAAM,OAAA,EAAG,EAAQ,EAAW,KACpC,IAAd,GAEF,KAKJ,SAAS,EAAK,EAAa,GAElB,IADH,IAAA,EAAW,EACR,EAAS,WAAW,QACzB,EAAW,EAAI,MAAM,GAEnB,GAAA,EAAM,GACD,OAAA,EAAM,GAET,IAAA,EAAQ,EAAM,EAAK,GAKlB,OAJP,IACA,IAEA,EAAM,GAAY,EACX,EAGI,QAAA,OAAS,CAChB,gBACK,OAAA,GAGT,QAAA,SAAQ,GACF,GAAA,EACK,OAAA,IAGT,EAAe,KAAK,GAEF,IAAd,GACF,KAIJ,WAAA,SAAW,GACT,EAAkB,KAAK,IAGzB,MAAA,SAAM,GACG,OAAA,EAAK,EAAK,SAAC,EAAa,GACvB,IAAA,EAAM,IAAI,MAGT,OAFP,EAAI,IAAM,EACV,EAAI,iBAAiB,OAAQ,GAAa,GACnC,KAIX,MAAA,SAAM,GACG,OAAA,EAAK,EAAK,SAAC,EAAa,GACvB,IAAA,EAAQ,IAAI,MAClB,EAAM,IAAM,EAML,OADP,EAAM,iBAAiB,UAJR,SAAT,EAAS,GACb,EAAM,oBAAoB,UAAW,GACrC,EAAY,KAE4B,GACnC,IACN;;AClFM,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,4BACA,EAAA,QAAA,mBAEA,EAAA,SAAA,GAGE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,OAAO,KAJE,OAKT,EAAK,IAAM,EAAA,OAAO,MAAM,GALf,EAOb,OAP6B,EAAA,EAAA,GAO7B,EAPA,CAA6B,EAAA,QAAhB,QAAA,QAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,4BAEA,EAAA,QAAA,oBAEA,EAAA,SAAA,GAOE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,OAAO,KARE,OAST,EAAK,QAAU,EACf,EAAK,KAAO,EAAA,WAAW,OACvB,EAAK,MAAQ,CAAE,EAAG,EAAG,EAAG,GACxB,EAAK,OAAS,CAAE,EAAG,EAAG,EAAG,GACzB,EAAK,MAAQ,CAAE,EAAG,EAAG,EAAG,GACxB,EAAK,SAAW,EAdP,EAgBb,OAhB4B,EAAA,EAAA,GAgB5B,EAhBA,CAA4B,EAAA,QAAf,QAAA,OAAA;;ACDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,4BACA,EAAA,QAAA,oBAEA,EAAA,SAAA,GAIE,SAAA,EAAY,EAAW,QAAX,IAAA,IAAA,EAAA,SAAW,IAAA,IAAA,EAAA,IAAvB,IAAA,EACE,EAAA,KAAA,OAAO,KALE,OAMT,EAAK,KAAO,EAAA,WAAW,KACvB,EAAK,KAAO,EACZ,EAAK,MAAQ,EARJ,EAUb,OAV0B,EAAA,EAAA,GAU1B,EAVA,CAA0B,EAAA,QAAb,QAAA,KAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,oBACA,EAAA,QAAA,sBAEA,EAAA,SAAA,GAGE,SAAA,EAAY,EAAW,EAAW,QAAA,IAAA,IAAA,EAAA,CAAU,KAAM,SAAlD,IAAA,EACE,EAAA,KAAA,OAAO,KAJE,OAKT,EAAK,KAAO,EAAA,WAAW,KACvB,EAAK,IAAM,IAAI,EAAA,IAAI,EAAG,GACtB,EAAK,EAAI,EACT,EAAK,EAAI,EACT,EAAK,MAAQ,EATJ,EAWb,OAX0B,EAAA,EAAA,GAW1B,EAXA,CAA0B,EAAA,QAAb,QAAA,KAAA;;ACDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAGE,SAAA,EAAY,GAAZ,IAAA,EAAA,UAAY,IAAA,IAAA,GAAA,GACL,KAAA,KAAO,GAER,IAEF,SAAS,iBAAiB,UAAW,SAAA,GAC/B,CAAC,GAAI,GAAI,GAAI,GAAI,IAAI,QAAQ,EAAE,QAAU,GAC3C,EAAE,iBAEJ,EAAK,KAAK,EAAE,QAAS,IACpB,GAEH,SAAS,iBAAiB,QAAS,SAAA,GACjC,EAAK,KAAK,EAAE,QAAS,IACpB,IA2CT,OAvCE,EAAA,UAAA,IAAA,SAAI,EAAa,GAIR,YAHO,IAAV,IACG,KAAA,KAAK,GAAO,GAEZ,KAAK,KAAK,IAGnB,EAAA,UAAA,MAAA,WAAA,IAAA,EAAA,KACE,OACG,KAAK,KAAK,MACV,QAAQ,SAAA,GACP,EAAK,KAAK,IAAO,KAKvB,OAAA,eAAI,EAAA,UAAA,SAAM,CAAV,IAAA,WACS,OAAA,KAAK,KAAK,KADT,YAAA,EArCC,cAAA,IAyCX,OAAA,eAAI,EAAA,UAAA,IAAC,CAAL,IAAA,WACM,OAAA,KAAK,KAAK,KAAO,KAAK,KAAK,KACrB,EAEN,KAAK,KAAK,KAAO,KAAK,KAAK,IACtB,EAEF,GAPJ,YAAA,EAzCM,cAAA,IAmDX,OAAA,eAAI,EAAA,UAAA,IAAC,CAAL,IAAA,WACM,OAAA,KAAK,KAAK,KAAO,KAAK,KAAK,KACrB,EAEN,KAAK,KAAK,KAAO,KAAK,KAAK,IACtB,EAEF,GAPJ,YAAA,EAnDM,cAAA,IA4Db,EA5DA,GAAa,QAAA,YAAA;;ACDA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAOE,SAAA,EAAY,GAAZ,IAAA,EAAA,KACO,KAAA,GAAK,EAEL,KAAA,IAAM,CAAE,EAAG,EAAG,EAAG,GACjB,KAAA,QAAS,EACT,KAAA,SAAU,EACV,KAAA,UAAW,EAGhB,SAAS,iBAAiB,YAAa,SAAA,GAAK,OAAA,EAAK,KAAK,KAAI,GAC1D,SAAS,iBAAiB,UAAW,WAAM,OAAA,EAAK,OAAM,GACtD,SAAS,iBAAiB,YAAa,SAAA,GAAK,OAAA,EAAK,KAAK,KAAI,GA+B9D,OA5BE,EAAA,UAAA,kBAAA,SAAkB,GAAE,IAAA,EAAA,EAAA,QAAS,EAAA,EAAA,QACnB,EAAF,KAAE,GAAI,EAAN,KAAM,IACN,EAAO,EAAG,wBACV,EAAK,EAAG,MAAQ,EAAG,YACnB,EAAK,EAAG,OAAS,EAAG,aAC1B,EAAI,GAAK,EAAU,EAAK,MAAQ,EAChC,EAAI,GAAK,EAAU,EAAK,KAAO,GAGjC,EAAA,UAAA,KAAA,SAAK,GACE,KAAA,QAAS,EACT,KAAA,SAAU,EACV,KAAA,kBAAkB,IAGzB,EAAA,UAAA,GAAA,WACO,KAAA,QAAS,EACT,KAAA,UAAW,GAGlB,EAAA,UAAA,KAAA,SAAK,GACE,KAAA,kBAAkB,IAGzB,EAAA,UAAA,OAAA,WACO,KAAA,UAAW,EACX,KAAA,SAAU,GAEnB,EAjDA,GAAa,QAAA,cAAA;;;;ACOA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,IAAA,EAAA,QAAA,wBACA,EAAA,QAAA,6BAGM,EAAO,EAAI,GACX,EAAmB,EAAP,EACZ,EAAa,EACb,EAAQ,EAAO,EAErB,EAAA,WAOE,SAAA,EAAY,EAAW,EAAW,QAAA,IAAA,IAAA,EAAA,UAC3B,KAAA,EAAI,EACJ,KAAA,EAAI,EACJ,KAAA,SAAW,IAAI,EAAA,eAAe,EAAG,GACtC,SAAS,cAAc,GAAQ,YAAY,KAAK,SAAS,MAEpD,KAAA,MAAQ,IAAI,EAAA,UA4BrB,OAzBE,EAAA,UAAA,IAAA,SAAI,GAAJ,IAAA,EAAA,UAAI,IAAA,IAAA,EAAA,cACE,IAAA,EAAK,EACL,EAAO,EACL,EAAQ,SAAR,EAAS,GACb,sBAAsB,GAEhB,IAAA,EAAI,EAAK,IAIR,IAHP,GAAM,KAAK,IAAI,EAAI,EAAM,GACzB,EAAO,EAEA,GAAM,GACX,EAAK,MAAM,OAAO,EAAM,EAAI,GAC5B,EAAW,EAAM,EAAI,GACrB,GAAM,EAER,EAAK,SAAS,OAAO,EAAK,QAQ5B,sBALa,SAAC,GACZ,EAAO,EAAK,IACZ,sBAAsB,MAK5B,EAzCA,GAAa,QAAA,KAAA;;AC4CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnDP,IAAA,EAAA,KAAA,OACA,EAAQ,SAAC,EAAa,GAKnB,YALmB,IAAA,IAAA,EAAA,MACf,MAAP,IACF,EAAM,GAAO,EACb,EAAM,GAED,KAAY,EAAM,GAAO,GAG5B,EAAO,SAAC,EAAa,GAAuB,YAAvB,IAAA,IAAA,EAAA,MAAuB,KAAK,MAAM,EAAM,EAAK,KAElE,EAAY,SAAC,GAAoB,YAApB,IAAA,IAAA,EAAA,GAAqC,IAAjB,EAAK,EAAG,IAEzC,EAAc,SAAI,GAAkB,OAAA,EAAM,EAAK,EAAM,UAErD,EAAW,SAAC,EAAgB,GAC1B,IAAA,EAAK,EAAE,EAAI,EAAE,EACb,EAAK,EAAE,EAAI,EAAE,EACZ,OAAA,KAAK,KAAK,EAAK,EAAK,EAAK,IAG5B,EAAQ,SAAC,EAAW,EAAa,GAAgB,OAAA,KAAK,IAAI,EAAK,KAAK,IAAI,EAAG,KAE3E,EAAQ,SAAC,EAAgB,GACvB,IAAA,EAAK,EAAE,EAAI,EAAE,EACb,EAAK,EAAE,EAAI,EAAE,EACb,EAAQ,KAAK,MAAM,EAAI,GAEtB,OAAA,GAIL,EAAO,GACL,EAAa,SAAC,GAIX,YAJW,IAAA,IAAA,EAAA,KACb,MAAM,KACT,EAAO,GAEF,GAGH,EAAe,WAGZ,OADP,GAAe,MAAP,EAAe,GAAK,YACd,YAGV,EAAkB,SAAC,QAAA,IAAA,IAAA,GAAA,GACvB,IACA,EAAS,EAAS,EAAe,KAAK,QAG3B,QAAA,KAAO,CAClB,MAAK,EACL,KAAI,EACJ,YAAW,EACX,UAAS,EACT,SAAQ,EACR,MAAK,EACL,MAAK,EACL,gBAAe,EACf,WAAU,EACV,aAAY;;ACWD,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAxEb,IAAA,EAAA,QAAA,oBACA,EAAA,QAAA,UAGM,EAAS,SAAC,GACN,IAAA,EAAA,EAAA,IAAK,EAAA,EAAA,EAAG,EAAA,EAAA,EACT,MAAA,CACL,EAAG,EAAI,EAAI,EAAI,EACf,EAAG,EAAI,EAAI,EAAI,IAIb,EAAW,SAAC,EAAW,GAAc,OAAA,EAAA,KAAK,SAAS,EAAO,GAAI,EAAO,KAErE,EAAW,SAAC,GAChB,EAAE,SAAW,EAAE,UAAY,GACrB,IAAA,EAAK,IAAI,EAAA,KAAK,EAAE,EAAG,EAAE,EAAG,CAAE,KAAM,yBAElC,GADJ,EAAE,SAAS,KAAK,GACZ,EAAE,OAAQ,CACN,IAAA,EAAA,EAAA,OACJ,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,EAEL,EAAK,IAAI,EAAA,KAAK,EAAG,EAAG,CAAE,KAAM,yBAClC,EAAG,IAAI,EAAI,EACX,EAAG,IAAI,EAAI,EACX,EAAE,SAAS,KAAK,GAEX,OAAA,GAIH,EAAS,SAAC,GAEZ,IAAA,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,IAEF,EAFO,EAAA,QAES,CACpB,EAAG,EAAG,EAAG,EAAG,EAAC,EAAE,EAAC,GAEX,MAAA,CACL,EAAG,EAAI,EAAI,EAAI,EACf,EAAG,EAAI,EAAI,EAAI,EACf,EAAG,EAAI,EAAI,EACX,EAAG,EAAI,EAAI,IAIT,EAAM,SAAC,EAAY,GACjB,IAAA,EAAI,EAAO,GACX,EAAI,EAAO,GACV,OAAA,EAAE,EAAI,EAAE,GAAK,EAAE,GACjB,EAAE,GAAK,EAAE,EAAI,EAAE,GACf,EAAE,EAAI,EAAE,GAAK,EAAE,GACf,EAAE,GAAK,EAAE,EAAI,EAAE,GAGhB,EAAO,SAAC,EAAgB,EAAsB,GAC5C,IAAA,EAAI,EAAO,GACjB,EAAU,IAAI,SAAA,GACN,IAAA,EAAI,EAAO,GAEf,EAAE,EAAI,EAAE,GAAK,EAAE,GACZ,EAAE,GAAK,EAAE,EAAI,EAAE,GACf,EAAE,EAAI,EAAE,GAAK,EAAE,GACf,EAAE,GAAK,EAAE,EAAI,EAAE,GAElB,EAAY,MAKZ,EAAQ,SAAC,EAAW,GAAc,OAAA,EAAA,KAAK,MAAM,EAAO,GAAI,EAAO,KAExD,QAAA,OAAS,CACpB,OAAM,EACN,SAAQ,EACR,OAAM,EACN,IAAG,EACH,KAAI,EACJ,SAAQ,EACR,MAAK;;AC9EM,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAaA,OAZE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GACpB,IAAA,EAAA,EAAA,QAAS,EAAA,EAAA,MAAO,EAAA,EAAA,YACpB,GAAC,EAAD,CAGE,IAAA,EAAO,EAAM,GACnB,EAAK,OAAO,GAGZ,EAAY,EAAI,EAAK,MAAM,EAC3B,EAAY,EAAI,EAAK,MAAM,IAE/B,EAbA,GAAa,QAAA,qBAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAUA,OATE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GACpB,IAAA,EAAA,EAAA,KAAM,EAAA,EAAA,OACd,EAAO,SAAW,EACd,EAAO,QAAU,IACnB,EAAO,WACP,EAAO,MAAQ,EAAO,EAAO,SAAW,EAAO,QAC/C,EAAO,SAAW,IAGxB,EAVA,GAAa,QAAA,cAAA;;ACyBA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA1Bb,IAAA,EAAA,QAAA,qBACA,EAAA,QAAA,qCACA,EAAA,QAAA,8BAEA,EAAA,SAAA,GAOE,SAAA,EAAY,EAAuB,GAAnC,IAAA,EACE,EAAA,KAAA,OAAO,KAcE,OAbT,EAAK,OAAS,EACd,EAAK,KAAO,EACZ,EAAK,gBAAkB,IAAI,EAAA,cAC3B,EAAK,QAUI,EAFb,OApB0B,EAAA,EAAA,GAexB,EAAA,UAAA,MAAA,WACG,KAAA,MAAA,KAAA,OAAA,GACI,KAAA,SAAW,EACX,KAAA,QAAU,GAEnB,EApBA,CAA0B,EAAA,QAAb,QAAA,KAAA,EAsBb,IAAA,EAAA,SAAA,GAME,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,OAAO,KAPE,OAQT,EAAK,MAAQ,GACb,EAAK,SAAU,EACf,EAAK,YAAc,EAAE,MACrB,EAAK,QAAU,KAEf,EAAK,gBAAkB,IAAI,EAAA,qBAblB,EAiCb,OAjCiC,EAAA,EAAA,GAgB/B,EAAA,UAAA,IAAA,SAAI,EAAc,EAAuB,GAEhC,OADF,KAAA,MAAM,GAAQ,IAAI,EAAK,EAAQ,GAC7B,KAAK,MAAM,IAGpB,EAAA,UAAA,KAAA,SAAK,GACG,IAAE,EAAF,KAAE,QAAS,EAAX,KAAW,MACb,IAAS,IAGR,KAAA,QAAU,EACf,EAAM,GAAM,UAGd,EAAA,UAAA,KAAA,WACO,KAAA,QAAU,MAEnB,EAjCA,CAAiC,EAAA,QAApB,QAAA,YAAA;;ACtBA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,IAAA,EAAA,QAAA,YAGA,EAAA,QAAA,oBACA,EAAA,QAAA,wBAEA,EAAA,SAAA,GAOE,SAAA,EAAY,EAAkB,EAAW,GAAzC,IAAA,EACE,EAAA,KAAA,KAAM,IAAQ,KARL,OAST,EAAK,KAAO,EAAA,WAAW,WACvB,EAAK,MAAQ,EACb,EAAK,MAAQ,EACb,EAAK,MAAQ,CAAE,EAAG,EAAG,EAAG,GACxB,EAAK,MAAQ,IAAI,EAAA,YAAY,GAbpB,EA2Bb,OA3BgC,EAAA,EAAA,GAgB9B,EAAA,UAAA,SAAA,SAAS,GACF,KAAA,MAAQ,GAGf,OAAA,eAAI,EAAA,UAAA,IAAC,CAAL,IAAA,WACS,OAAA,KAAK,MAAQ,KAAK,IAAI,KAAK,MAAM,IADrC,YAAA,EApBM,cAAA,IAwBX,OAAA,eAAI,EAAA,UAAA,IAAC,CAAL,IAAA,WACS,OAAA,KAAK,MAAQ,KAAK,IAAI,KAAK,MAAM,IADrC,YAAA,EAxBM,cAAA,IA2Bb,EA3BA,CAAgC,EAAA,QAAnB,QAAA,WAAA;;ACDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IALb,IAAA,EAAA,QAAA,eAEA,EAAA,QAAA,gBAGA,EAAA,SAAA,GASE,SAAA,EACE,EACA,EACA,EACA,EACA,EACA,GANF,IAAA,EAQE,EAAA,KAAA,OAAO,KAjBE,OAmBT,EAAK,KAAO,EACZ,EAAK,KAAO,EACZ,EAAK,MAAQ,EACb,EAAK,MAAQ,EACb,EAAK,EAAI,EAAO,EAChB,EAAK,EAAI,EAAO,EAGhB,EAAK,SAAW,EAAM,IAAI,SAAC,EAAoB,GACvC,IAAA,EAAI,IAAI,EAAA,WAAW,EAAS,EAAO,GAIlC,OAHP,EAAE,MAAQ,EACV,EAAE,IAAI,EAAI,EAAI,EAAO,EACrB,EAAE,IAAI,EAAI,KAAK,MAAM,EAAI,GAAQ,EAC1B,IAhCA,EAkFb,OAlF6B,EAAA,EAAA,GAqC3B,EAAA,UAAA,cAAA,SAAc,GACN,IAAE,EAAF,KAAE,MAAO,EAAT,KAAS,MACR,MAAA,CACL,EAAG,KAAK,MAAM,EAAI,EAAI,GACtB,EAAG,KAAK,MAAM,EAAI,EAAI,KAI1B,EAAA,UAAA,cAAA,SAAc,GACN,IAAE,EAAF,KAAE,MAAO,EAAT,KAAS,MACR,MAAA,CACL,EAAG,EAAO,EAAI,EACd,EAAG,EAAO,EAAI,IAIlB,EAAA,UAAA,aAAA,SAAa,GACJ,OAAA,KAAK,SAAS,EAAO,EAAI,KAAK,KAAO,EAAO,IAGrD,EAAA,UAAA,eAAA,SAAe,GACN,OAAA,KAAK,aAAa,KAAK,cAAc,KAG9C,EAAA,UAAA,iBAAA,SAAiB,EAAqB,GAC9B,IAAA,EAAO,KAAK,aAAa,GAExB,OADP,EAAK,MAAQ,EACN,GAGT,EAAA,UAAA,mBAAA,SAAmB,EAAkB,GAC5B,OAAA,KAAK,iBAAiB,KAAK,cAAc,GAAM,IAGxD,EAAA,UAAA,eAAA,SAAe,EAAgB,EAAQ,GAAvC,IAAA,EAAA,KACS,YADsB,IAAA,IAAA,EAAA,QAAQ,IAAA,IAAA,EAAA,GAC9B,CACL,CAAC,EAAO,EAAG,EAAO,GAClB,CAAC,EAAO,EAAI,EAAO,EAAG,EAAO,GAC7B,CAAC,EAAO,EAAG,EAAO,EAAI,EAAO,GAC7B,CAAC,EAAO,EAAI,EAAO,EAAG,EAAO,EAAI,EAAO,IACxC,IAAI,SAAC,GAAC,IAAA,EAAA,EAAA,GAAG,EAAA,EAAA,GAAO,OAAA,EAAK,eAAe,CACpC,EAAG,EAAI,EACP,EAAG,EAAI,OAGb,EAlFA,CAA6B,EAAA,WAAhB,QAAA,QAAA;;ACDA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,8BAIA,EAAA,SAAA,GAAA,SAAA,IAAa,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAQb,OARqC,EAAA,EAAA,GACnC,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GAC5B,EAAA,UAAM,OAAM,KAAA,KAAC,EAAI,EAAG,GAEhB,EAAO,SACT,EAAO,SAGb,EARA,CAAqC,EAAA,0BAAxB,QAAA,gBAAA;;ACIA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IARb,IAAA,EAAA,QAAA,eAEA,EAAA,QAAA,YACA,EAAA,QAAA,YACA,EAAA,QAAA,iBACA,EAAA,QAAA,iCAGA,EAAA,SAAA,GAKE,SAAA,EACE,EAA+B,EAAsB,QAAA,IAAA,IAAA,EAAA,GADvD,IAAA,EAGE,EAAA,KAAA,OAAO,KARE,OAST,EAAK,EAAI,EAAS,EAClB,EAAK,EAAI,EAAS,EAClB,EAAK,UAAY,EACjB,EAAK,gBAAkB,IAAI,EAAA,gBAE3B,EAAK,WAAW,GAdP,EAwDb,OAxD4B,EAAA,EAAA,GAiB1B,EAAA,UAAA,WAAA,SAAW,GAEF,KAAA,QADH,EACa,aAAa,EAAA,OAAS,EAAE,IAAM,EAE9B,KAAK,IAGjB,KAAA,OAAS,CAAE,EAAG,EAAG,EAAG,GAGrB,aAAa,EAAA,SACV,KAAA,OAAO,GAAK,EAAE,EAAI,EAClB,KAAA,OAAO,GAAK,EAAE,EAAI,GAGrB,aAAa,EAAA,SACV,KAAA,OAAO,GAAK,EAAE,OAAO,EACrB,KAAA,OAAO,GAAK,EAAE,OAAO,GAGvB,KAAA,SAGP,EAAA,UAAA,MAAA,WACQ,IAAA,EAAA,KACJ,EAAA,EAAA,IAAK,EAAA,EAAA,EAAG,EAAA,EAAA,EAAG,EAAA,EAAA,UAAW,EAAA,EAAA,QAAS,EAAA,EAAA,OAG3B,EAAY,EAAQ,EAAI,EAAO,EAAI,EAAI,EACvC,EAAO,EAAU,EAAI,EACrB,GAAK,EAAA,KAAK,MAAM,EAAW,EAAG,GAE9B,EAAY,EAAQ,EAAI,EAAO,EAAI,EAAI,EACvC,EAAO,EAAU,EAAI,EACrB,GAAK,EAAA,KAAK,MAAM,EAAW,EAAG,GAEpC,EAAI,EAAI,EACR,EAAI,EAAI,GAEZ,EAxDA,CAA4B,EAAA,WAAf,QAAA,OAAA;;ACJA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,QAAA,mBAEa,QAAA,aAAe,SAAC,EAAa,EAAc,EAAO,QAAP,IAAA,IAAA,EAAA,QAAO,IAAA,IAAA,EAAA,GACvD,IAAA,EAAS,EAAA,OAAO,OAAO,GAQtB,OAPO,EAAI,eAAe,EAAQ,EAAG,GACxB,IAAI,SAAA,GAAK,OAAA,GAAK,EAAE,MAAM,WACpB,KAAK,SAAA,GAAK,OAAC,MAE/B,EAAI,EACJ,EAAI,GAEC,CAAE,EAAC,EAAE,EAAC;;ACTF,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,QAAA,mBAEa,QAAA,UAAY,SAAC,EAAa,EAAc,EAAO,GACtD,IAAA,OAD+C,IAAA,IAAA,EAAA,QAAO,IAAA,IAAA,EAAA,GAGpD,IAAA,EAAS,EAAA,OAAO,OAAO,GACvB,EAAO,CACX,IAAI,EAAO,MAAM,EAAO,MAAM,EAAO,OAAO,GAI1C,EAAK,EACL,EAAK,EAGL,GAAM,IAAN,EAAS,CAEL,IAAA,GADN,EAAQ,EAAI,eAAe,EAAQ,EAAG,IAChC,IAAA,SAAA,GAAA,OAAA,GAAA,EAAA,MAAA,WAAC,EAAA,EAAA,GAAI,EAAA,EAAA,GAAI,EAAA,EAAA,GAAI,EAAA,EAAA,KAGf,EAAI,IAAO,GAAM,IACnB,EAAK,IAAK,EAEV,EADW,EAAM,GAAG,IAAI,EAAI,EAAM,GAAG,EACrB,EAAO,KAGrB,EAAI,IAAO,GAAM,IACnB,EAAK,MAAO,EAEZ,EADW,EAAM,GAAG,IAAI,EAAI,GACX,EAAO,EAAI,EAAO,IAKnC,GAAM,IAAN,EAAS,CAEL,IAAA,GADN,EAAQ,EAAI,eAAe,EAAQ,EAAI,IACjC,IAAA,SAAA,GAAA,OAAA,GAAA,EAAA,MAAA,WAAC,EAAA,EAAA,GAAI,EAAA,EAAA,GAAI,EAAA,EAAA,GAAI,EAAA,EAAA,KAGf,EAAI,IAAO,GAAM,IACnB,EAAK,MAAO,EAEZ,EADW,EAAM,GAAG,IAAI,EAAI,EAAM,GAAG,EACrB,EAAO,KAGrB,EAAI,IAAO,GAAM,IACnB,EAAK,OAAQ,EAEb,EADW,EAAM,GAAG,IAAI,EAAI,GACX,EAAO,EAAI,EAAO,IAKhC,MAAA,CAAE,EAAG,EAAI,EAAG,EAAI,KAAI;;ACvDhB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAOE,SAAA,EAAY,GACL,KAAA,IAAI,GA4Bb,OAzBE,EAAA,UAAA,IAAA,SAAI,GACG,KAAA,KAAO,KAAK,MACZ,KAAA,MAAQ,EACR,KAAA,KAAO,EACP,KAAA,cAAe,EACf,KAAA,OAAQ,GAGf,EAAA,UAAA,IAAA,WACS,OAAA,KAAK,OAGd,EAAA,UAAA,OAAA,SAAO,GACA,KAAA,MAAQ,KAAK,aACb,KAAA,MAAQ,KAAK,MAAQ,EAAI,EACzB,KAAA,cAAe,GAGtB,EAAA,UAAA,GAAA,SAAG,GACM,OAAA,KAAK,QAAU,GAGxB,EAAA,UAAA,KAAA,WAAK,IAAL,IAAA,EAAA,KAAK,EAAA,GAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,GAAA,UAAA,GACI,OAAA,EAAO,KAAK,SAAA,GAAK,OAAA,EAAK,GAAG,MAEpC,EApCA,GAAa,QAAA,MAAA;;AC8CA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA3Cb,IAAM,EAAa,SAAC,EAAW,GACrB,IAAA,EAAA,EAAA,IAAK,EAAA,EAAA,KAAA,OAAA,IAAA,EAAA,EAAA,EACb,EAAI,GAAK,EAAM,EAAI,EACnB,EAAI,GAAK,EAAM,EAAI,GAGf,EAAgB,SAAC,EAAW,GAC1B,IAAA,EAAW,EAAE,IAAI,QAAQ,UAAU,GAAG,YAAY,SAAS,GACjE,EAAW,EAAG,IAGV,EAA0B,SAAC,EAAW,GACpC,IAAA,EAAW,EAAE,IAChB,QACA,UAAU,GACV,YACA,SAAS,GACZ,EAAW,EAAG,CAAE,EAAG,EAAS,EAAG,EAAG,KAG9B,EAAe,SAAC,EAAW,EAAY,GAC3C,EAAW,EAAG,CAAE,EAAG,EAAM,EAAI,EAAI,EAAG,EAAM,EAAI,KAG1C,EAAY,SAAC,EAAW,GACpB,IAAA,EAAA,EAAA,IAAK,EAAA,EAAA,IACP,EAAK,EAAI,EAAI,EAAI,EAAI,EACrB,EAAK,EAAI,EAAI,EAAI,EAAI,EACrB,GAAK,EAAI,EAAI,GAAM,EAAI,EACvB,GAAK,EAAI,EAAI,GAAM,EAAI,EAGtB,OAFP,EAAI,IAAI,EAAI,GACZ,EAAI,IAAI,EAAG,GACJ,CAAE,EAAC,EAAE,EAAC,IAGT,EAAe,SAAC,EAAW,GACzB,IAAA,EAAM,EAAU,EAAG,GAElB,OADP,EAAE,IAAI,IAAI,GACH,GAGH,EAAQ,SAAC,GAAE,IAAA,EAAA,EAAA,IAAkB,OAAA,KAAK,KAAK,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,IAE5D,QAAA,QAAU,CACrB,WAAU,EACV,aAAY,EACZ,UAAS,EACT,aAAY,EACZ,MAAK,EACL,cAAa,EACb,wBAAuB;;AClDZ,aAAA,IAAA,EAAA,MAAA,KAAA,UAAA,WAAA,OAAA,EAAA,OAAA,QAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,IAAA,IAAA,KAAA,EAAA,UAAA,GAAA,OAAA,UAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,IAAA,MAAA,KAAA,YAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,QAAA,aAEA,EAAA,WAME,SAAA,EAAY,EAAa,GAAzB,IAAA,EAAA,UAAyB,IAAA,IAAA,EAAA,IAClB,KAAA,SAAU,EACV,KAAA,IAAM,EACN,KAAA,QAAO,EAAA,CAAK,OAAQ,GAAM,GAGzB,IAAA,EAAQ,EAAA,OAAO,MAAM,GAC3B,EAAM,IAAM,EACR,EAAQ,OACV,EAAM,MAAO,GAEf,EAAM,iBACJ,QACA,WACQ,MAAA,MAAM,wBAAwB,KAEtC,GAGF,EAAM,iBACJ,QACA,WACE,EAAK,SAAU,IAEjB,GAEG,KAAA,MAAQ,EAwBjB,OArBE,EAAA,UAAA,KAAA,SAAK,QAAA,IAAA,IAAA,EAAA,IACG,IAAE,EAAF,KAAE,MAAO,EAAT,KAAS,QACT,EAAI,EAAA,EAAA,CAAmB,KAAM,GAAM,GAAY,GACrD,EAAM,OAAS,EAAK,OACpB,EAAM,YAAc,EAAK,KACzB,EAAM,OACD,KAAA,SAAU,GAGjB,EAAA,UAAA,KAAA,WACO,KAAA,MAAM,QACN,KAAA,SAAU,GAGjB,OAAA,eAAI,EAAA,UAAA,SAAM,CAAV,IAAA,WACS,OAAA,KAAK,MAAM,QAGpB,IAAA,SAAW,GACJ,KAAA,QAAQ,OAAS,KAAK,MAAM,OAAS,GALlC,YAAA,EAjDC,cAAA,IAwDb,EAxDA,GAAa,QAAA,MAAA;;ACCA,aAAA,IAAA,EAAA,MAAA,KAAA,gBAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,EAAA,EAAA,IAAA,GAAA,UAAA,GAAA,OAAA,IAAA,EAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,IAAA,IAAA,EAAA,UAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,EAAA,IAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,WAGA,EAAA,WAIE,SAAA,EAAY,EAAa,EAA4B,QAA5B,IAAA,IAAA,EAAA,SAA4B,IAAA,IAAA,EAAA,GAC9C,KAAA,MAAQ,EACR,KAAA,OAAS,EAAI,MAAM,IACrB,IAAI,WAAM,OAAA,IAAI,EAAA,MAAM,EAAK,KAchC,OAVE,EAAA,UAAA,KAAA,SAAK,GACK,IAAA,EAAA,KAAA,OAER,EADc,KAAK,QAAU,EAAO,QACtB,KAAK,IAIrB,EAAA,UAAA,KAAA,WACO,KAAA,OAAO,QAAQ,SAAA,GAAS,OAAA,EAAM,UAEvC,EArBA,GAAa,QAAA,UAAA;;ACAA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAFb,IAAA,EAAA,QAAA,uBAEA,EAAA,WAGE,SAAA,EAAY,GACL,KAAA,OAAS,EAalB,OATE,EAAA,UAAA,KAAA,SAAK,QAAA,IAAA,IAAA,EAAA,IACK,IAAA,EAAA,KAAA,OACR,EAAA,KAAK,YAAY,GAAQ,KAAK,IAIhC,EAAA,UAAA,KAAA,WACO,KAAA,OAAO,QAAQ,SAAA,GAAS,OAAA,EAAM,UAEvC,EAjBA,GAAa,QAAA,WAAA;;ACqBb,aAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,QAAA,eAAA,KAAA,QAAA,GAAA,EAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAzBA,EAAA,QAAA,8BACA,EAAA,QAAA,yBACA,EAAA,QAAA,uBACA,EAAA,QAAA,sBACA,EAAA,QAAA,oBACA,EAAA,QAAA,oBACA,EAAA,QAAA,2BACA,EAAA,QAAA,6BACA,EAAA,QAAA,iCACA,EAAA,QAAA,0CACA,EAAA,QAAA,kBACA,EAAA,QAAA,WACA,EAAA,QAAA,iBACA,EAAA,QAAA,mBACA,EAAA,QAAA,uBACA,EAAA,QAAA,0BACA,EAAA,QAAA,sBACA,EAAA,QAAA,4BACA,EAAA,QAAA,yBACA,EAAA,QAAA,YACA,EAAA,QAAA,gBACA,EAAA,QAAA,oBACA,EAAA,QAAA,mBACA,EAAA,QAAA,uBACA,EAAA,QAAA,wBACA,EAAA,QAAA;;ACrBA,OAAA,QAAA,WACA,KAAA,cAAA,GACA,KAAA,OACA,KAAA,SACA,KAAA,OACA,KAAA,KACA,KAAA,KACA,KAAA,SAAA,GACA,KAAA;;ACJA,OAAA,QAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,KAAA,OAAA,EACA,KAAA,EAAA,EACA,KAAA,EAAA,EACA,KAAA,UAAA,EACA,KAAA,uBAAA,EAKA,KAAA,kBAAA,WACA,OAAA,KAAA,UAAA,KAAA;;;ACoWA,IAAA,GAtXA,WACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAwWA,EAAA,EAtWA,EAAA,KAAA,MAAA,EAAA,KAAA,IAOA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,GACA,EAEA,EAAA,EACA,EAEA,GAaA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAOA,GANA,MAAA,IACA,EAAA,GAEA,MAAA,IACA,EAAA,GAEA,EAAA,EACA,MAAA,IAAA,MAAA,2BAKA,IAHA,MAAA,IACA,EAAA,EAAA,QAEA,EAAA,GAEA,EAAA,EAAA,EADA,EAAA,GAAA,EAAA,GAAA,KACA,EACA,EAAA,EAEA,EAAA,EAAA,EAGA,MAAA,GAAA,OAAA,MAAA,EAAA,CAAA,EAAA,EAAA,GAAA,OAAA,IAAA,GAQA,EAAA,SAAA,EAAA,EAAA,GAKA,OAJA,MAAA,IACA,EAAA,GAEA,EAAA,KAAA,GACA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAQA,EAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAYA,OAXA,MAAA,IACA,EAAA,GAEA,EAAA,EAAA,MACA,EAAA,QACA,EAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,IAEA,EAAA,EAEA,GAeA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAOA,OANA,MAAA,IACA,EAAA,GAEA,EAAA,EAAA,GACA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,GACA,GAQA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAQA,OAPA,MAAA,IACA,EAAA,GAEA,EAAA,QAAA,EAAA,EAAA,GAAA,GAAA,IACA,GAAA,EAAA,CAAA,EAAA,GAAA,IAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAEA,GAQA,EAAA,SAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAUA,IATA,MAAA,IACA,EAAA,GAOA,EAAA,GACA,EAAA,EAAA,GANA,EAAA,WACA,EAAA,GACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,OAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,IAAA,EAAA,KAAA,GACA,OAAA,GACA,MAAA,MAAA,WAEA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,KAAA,EAAA,EAAA,EAAA,IAEA,OAAA,GASA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAKA,GAJA,MAAA,IACA,EAAA,IAGA,KADA,EAAA,EAAA,QAAA,IAKA,OADA,EAAA,EAAA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,IAQA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAKA,GAJA,MAAA,IACA,EAAA,KAEA,EAAA,EAAA,MAAA,EAAA,IACA,OACA,OAAA,EAIA,IAFA,EAAA,EAAA,GAEA,EAAA,EAAA,GADA,EAAA,EAAA,MAAA,IACA,OAAA,EAAA,EAAA,IACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,GAEA,OAAA,EAAA,KAAA,GAAA,WAQA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAIA,GAHA,MAAA,IACA,EAAA,GAEA,GAAA,GAAA,EAAA,OAAA,CAEA,KADA,EAAA,EAAA,MAAA,EAAA,GAAA,KAAA,IACA,OACA,OAAA,EAIA,IAFA,EAAA,EAAA,EAAA,OAAA,GAEA,EAAA,EAAA,GADA,EAAA,EAAA,MAAA,IACA,OAAA,EAAA,EAAA,IAEA,EADA,EAAA,EAAA,GACA,GAAA,IACA,EAAA,EAAA,EAAA,EAAA,KAAA,GACA,EAAA,MACA,EAAA,EAAA,EAAA,OAAA,IAGA,OAAA,EAIA,IAFA,EAAA,EAAA,GACA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EACA,EAAA,KAAA,EAAA,EAAA,IAEA,OAAA,GAGA,EAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAKA,IAJA,MAAA,IACA,EAAA,GAEA,EAAA,EAAA,GACA,EAAA,GAGA,EAAA,EADA,EAAA,EADA,EAAA,EAAA,GAAA,IAEA,GACA,EAAA,GAAA,EACA,EAAA,EAKA,OAAA,EAAA,GAAA,GAGA,EAAA,SAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAQA,IAPA,MAAA,IACA,EAAA,GAEA,EAAA,EAAA,OACA,EAAA,EACA,EAAA,EAAA,GACA,EAAA,EAAA,EAAA,EACA,EAAA,IACA,EAAA,EAAA,GACA,KAAA,EAAA,EAAA,GAAA,EAAA,IAAA,KACA,EAAA,GAEA,EAAA,GAAA,EAAA,GAEA,EAAA,GADA,EAAA,GACA,EAGA,OADA,EAAA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,IAGA,EAAA,WAiBA,SAAA,EAAA,GACA,KAAA,IAAA,MAAA,EAAA,EAAA,EACA,KAAA,MAAA,GAoEA,OAtFA,EAAA,KAAA,EAEA,EAAA,IAAA,EAEA,EAAA,QAAA,EAEA,EAAA,QAAA,EAEA,EAAA,QAAA,EAEA,EAAA,WAAA,EAEA,EAAA,SAAA,EAEA,EAAA,UAAA,EAOA,EAAA,UAAA,KAAA,SAAA,GACA,OAAA,EAAA,KAAA,MAAA,EAAA,KAAA,MAGA,EAAA,UAAA,IAAA,WACA,OAAA,EAAA,KAAA,MAAA,KAAA,MAGA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,MAAA,IAGA,EAAA,UAAA,SAAA,SAAA,GACA,OAAA,IAAA,KAAA,MAAA,QAAA,IAGA,EAAA,UAAA,QAAA,SAAA,GACA,OAAA,EAAA,KAAA,MAAA,EAAA,KAAA,MAGA,EAAA,UAAA,QAAA,SAAA,GACA,OAAA,EAAA,KAAA,MAAA,EAAA,KAAA,MAGA,EAAA,UAAA,QAAA,WACA,OAAA,EAAA,KAAA,MAAA,KAAA,MAGA,EAAA,UAAA,WAAA,SAAA,GACA,OAAA,EAAA,KAAA,MAAA,EAAA,KAAA,MAGA,EAAA,UAAA,MAAA,WACA,OAAA,KAAA,MAAA,IAGA,EAAA,UAAA,MAAA,WACA,OAAA,IAAA,KAAA,MAAA,QAGA,EAAA,UAAA,KAAA,WACA,OAAA,KAAA,MAAA,QAGA,EAAA,UAAA,MAAA,WACA,IAAA,EAGA,OAFA,EAAA,IAAA,GACA,MAAA,KAAA,MAAA,MAAA,GACA,GAGA,EAAA,UAAA,QAAA,WACA,OAAA,KAAA,MAAA,MAAA,IAGA,EAAA,UAAA,OAAA,EAAA,UAAA,KAEA,EAAA,UAAA,IAAA,EAAA,UAAA,KAEA,EAAA,UAAA,MAAA,EAAA,UAAA,KAEA,EAAA,UAAA,IAAA,EAAA,UAAA,SAEA,EAAA,UAAA,KAAA,EAAA,UAAA,MAEA,EAvFA,GA2FA,EAQA,KARA,EAQA,WACA,OAAA,GARA,mBAAA,GAAA,EAAA,IACA,EAAA,GAAA,GACA,iBAAA,QACA,OAAA,QAAA,IAEA,EAAA,KAAA,MAMA,KAAA;;ACtXA,OAAA,QAAA,QAAA;;ACQA,IAAA,EAAA,GACA,EAAA,QAAA,cACA,EAAA,QAAA,UACA,EAAA,QAAA,QAEA,MAAA,EAAA,EACA,EAAA,EAEA,OAAA,QAAA,EAEA,IAAA,EAAA,EAEA,EAAA,GAAA,WACA,IAIA,EAKA,EAIA,EAXA,GAAA,EACA,EAAA,GAEA,EAAA,GACA,EAAA,GACA,EAAA,GACA,GAAA,EAEA,EAAA,GACA,EAAA,GACA,EAAA,OAAA,UAEA,GAAA,EASA,KAAA,mBAAA,SAAA,GACA,aAAA,MAEA,EAAA,GACA,MAAA,WAAA,KAAA,SAAA,KAEA,EAAA,CAAA,KAQA,KAAA,WAAA,WACA,GAAA,GAMA,KAAA,YAAA,WACA,GAAA,GAMA,KAAA,gBAAA,WACA,GAAA,GAMA,KAAA,iBAAA,WACA,GAAA,GASA,KAAA,QAAA,SAAA,GACA,EAAA,EAGA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IACA,EAAA,EAAA,GAAA,MACA,EAAA,EAAA,GAAA,IAAA,IAYA,KAAA,YAAA,SAAA,EAAA,GACA,EAAA,GAAA,GAWA,KAAA,uBAAA,SAAA,EAAA,EAAA,QACA,IAAA,EAAA,KACA,EAAA,GAAA,IAEA,EAAA,GAAA,GAAA,GASA,KAAA,0BAAA,SAAA,EAAA,QACA,IAAA,EAAA,WACA,EAAA,GAAA,IAOA,KAAA,8BAAA,WACA,EAAA,IAWA,KAAA,wBAAA,SAAA,EAAA,EAAA,QACA,IAAA,EAAA,KACA,EAAA,GAAA,IAEA,EAAA,GAAA,GAAA,GAMA,KAAA,+BAAA,WACA,EAAA,IAWA,KAAA,4BAAA,SAAA,GACA,EAAA,GAUA,KAAA,qBAAA,SAAA,EAAA,QACA,IAAA,EAAA,KACA,EAAA,GAAA,IAEA,EAAA,GAAA,GAAA,GASA,KAAA,4BAAA,SAAA,EAAA,QACA,IAAA,EAAA,WACA,EAAA,GAAA,IAOA,KAAA,oBAAA,WACA,GAAA,GAMA,KAAA,qBAAA,WACA,GAAA,GAMA,KAAA,gCAAA,WACA,EAAA,IAeA,KAAA,SAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GAEA,IAAA,EAAA,SAAA,GACA,EACA,EAAA,GAEA,WAAA,WACA,EAAA,MAMA,QAAA,IAAA,EACA,MAAA,IAAA,MAAA,gFAGA,QAAA,IAAA,EACA,MAAA,IAAA,MAAA,qEAIA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,OAAA,EACA,MAAA,IAAA,MAAA,8DAIA,GAAA,IAAA,GAAA,IAAA,EAAA,CAQA,IAFA,IAAA,EAAA,EAAA,GAAA,GACA,GAAA,EACA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,IAAA,EAAA,GAAA,CACA,GAAA,EACA,MAIA,IAAA,IAAA,EAAA,CAMA,IAAA,EAAA,IAAA,EACA,EAAA,SAAA,IAAA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,oBAAA,EAAA,sBAEA,EAAA,mBAAA,EACA,EAAA,SAAA,GACA,EAAA,OAAA,EACA,EAAA,OAAA,EACA,EAAA,KAAA,EACA,EAAA,KAAA,EACA,EAAA,SAAA,EAEA,EAAA,SAAA,KAAA,EAAA,EAAA,EAAA,OACA,EAAA,OAAA,KAzRA,IA2RA,IAAA,EAAA,IAGA,OAFA,EAAA,GAAA,EACA,EAAA,KAAA,GACA,EAvBA,EAAA,WAfA,EAAA,KAgDA,KAAA,WAAA,SAAA,GACA,OAAA,KAAA,WACA,EAAA,IAEA,IAWA,KAAA,UAAA,WACA,GAAA,IAAA,EAAA,aAAA,IAAA,QAAA,IAAA,EAGA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,CACA,GAAA,IAAA,EAAA,OACA,OAGA,IAEA,EAAA,GAGA,IAAA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,QAAA,IAAA,EAOA,GAAA,IAAA,EAAA,SAAA,OAAA,CAOA,IAAA,EAAA,EAAA,SAAA,MAGA,GAAA,EAAA,OAAA,EAAA,GAAA,EAAA,OAAA,EAAA,EAgBA,EAAA,KAhXA,EAkXA,EAAA,EAAA,GACA,EAAA,EAAA,EACA,GAAA,EA5WA,EA4WA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,EAAA,EAAA,GAAA,OAAA,GACA,EAAA,EAAA,EACA,EAAA,EAhXA,EAgXA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,EAAA,EAAA,OAAA,GACA,EAAA,EAAA,EACA,EAAA,EApXA,EAoXA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,EAAA,EAAA,GACA,EAAA,EAAA,GACA,EAAA,EAxXA,EAwXA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,IACA,EAAA,EAAA,GAAA,EAAA,EAAA,IAEA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,EAAA,GACA,GAAA,EAjYA,IAiYA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAEA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,EAAA,EACA,EAAA,EA3YA,IA2YA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,IAEA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,EAAA,EACA,GAAA,EArZA,IAqZA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAGA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAEA,GACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAEA,EAAA,EAAA,GACA,EAAA,EA/ZA,IA+ZA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAxEA,CACA,IAAA,EAAA,GACA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAEA,IADA,IAAA,EAAA,EAAA,OACA,MAAA,GACA,EAAA,KAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IACA,EAAA,EAAA,OAEA,EAAA,UACA,IAAA,EAAA,EACA,EAAA,SAAA,UACA,EAAA,GACA,EAAA,cArBA,EAAA,SAAA,aACA,EAAA,GACA,EAAA,aARA,EAAA,UAgGA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAEA,SAAA,IAAA,EAAA,SACA,IAAA,EAAA,GAAA,KACA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,CACA,IAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,QAEA,IAAA,EAAA,MACA,EAAA,KA3bA,EA4bA,EAAA,SAAA,KAAA,IACA,EAAA,UAAA,EAAA,EAAA,YACA,EAAA,UAAA,EAAA,UAAA,EACA,EAAA,OAAA,EACA,EAAA,SAAA,WAAA,MAMA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,IAAA,EAAA,GAAA,GACA,GAAA,EAAA,CACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAOA,IANA,WACA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,KAAA,EAAA,OAAA,EAEA,OAAA,EAEA,GAAA,OAAA,EAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IACA,GAAA,EAAA,GAAA,KAAA,EAAA,GACA,OAAA,EAIA,OAAA,GAQA,EAAA,SAAA,EAAA,GACA,GAAA,IAAA,IAAA,IAAA,EAAA,OAAA,EAAA,IACA,GAAA,IAAA,IAAA,IAAA,EAAA,OAAA,EAAA,UACA,GAAA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,MACA,GAAA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,aACA,GAAA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,OACA,IAAA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,YACA,IAAA,IAAA,GAAA,IAAA,EAAA,OAAA,EAAA,KACA,IAAA,IAAA,IAAA,IAAA,EAAA,OAAA,EAAA,SACA,MAAA,IAAA,MAAA,oCAAA,EAAA,KAAA,IAGA,EAAA,SAAA,EAAA,GACA,OAAA,EAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,KAGA,EAAA,SAAA,EAAA,EAAA,EAAA,EAAA,GACA,QAAA,IAAA,EAAA,SAAA,IACA,QAAA,IAAA,EAAA,SAAA,GAAA,GACA,OAAA,EAAA,SAAA,GAAA,QAGA,EAAA,SAAA,GAAA,GAEA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,KAAA,EAAA,MACA,GAAA,OAAA,EACA,IAAA,EAAA,EAAA,UAAA,OAEA,EAAA,EAEA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAEA,OADA,EAAA,SAAA,GAAA,GAAA,EACA,GAGA,EAAA,SAAA,EAAA,EAAA,EAAA,GAGA,IASA,EACA,EAZA,OAAA,GAEA,EAAA,KAAA,IAAA,EAAA,KACA,EAAA,KAAA,IAAA,EAAA,IA/fA,IAigBA,EAAA,EAjgBA,IAmgBA,EAAA,GAIA,EAAA,KAAA,IAAA,EAAA,KACA,EAAA,KAAA,IAAA,EAAA,MAMA,EAAA,IAAA,MACA,EAAA,UAAA,YACA,EAAA,MAAA,QACA,EAAA,aAAA,eACA,EAAA,OAAA,SACA,EAAA,YAAA,cACA,EAAA,KAAA,OACA,EAAA,SAAA;;;;AC5hBa,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,cAAA,SAAA,GAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,GAAA,GAAA,MAAA,EAAA,IAAA,IAAA,KAAA,EAAA,OAAA,eAAA,KAAA,EAAA,KAAA,EAAA,GAAA,EAAA,IAAA,OAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAfb,IAAA,EAAA,EAAA,QAAA,eACA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,uCAEM,EAAU,IAAI,EAAA,QAAQ,EAAA,SAEtB,EAAc,CAClB,CACE,GAAI,QAAS,EAAG,EAAG,EAAG,EAAG,UAAU,GAErC,CAAE,GAAI,OAAQ,EAAG,EAAG,EAAG,GACvB,CAAE,GAAI,WAAY,EAAG,EAAG,EAAG,IAG7B,EAAA,SAAA,GAGE,SAAA,EAAY,EAAW,GAUhB,IAVP,IAAA,EAAA,KAEQ,EAAO,KAAK,MAAM,EADP,IAEX,EAAO,KAAK,MAAM,EAFP,IAKX,EAAS,SAAC,GAAe,OAAA,EAAY,QAD3B,SAAC,GAAe,OAAA,EAAY,KAAK,SAAA,GAAK,OAAA,EAAE,KAAO,IACZ,CAAQ,KAGrD,EAAQ,MAAM,EAAO,GAAM,KAAK,GAC7B,EAAI,EAAG,EAAI,EAAM,IACnB,IAAA,IAAI,EAAI,EAAG,EAAI,EAAM,IAKpB,GAAM,IAAN,GAAiB,IAAN,GAAW,IAAM,EAAO,GAAK,IAAM,EAAO,GAMrD,KAAA,EAAI,GAAK,EAAI,GAAK,EAAA,KAAK,UAAU,IAAjC,CAGJ,EAAM,EAAI,EAAO,GAAK,EAGhB,IAAA,EAAA,EAAA,KAAA,YAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,EAAA,EAAA,KAAC,EAAA,EAAA,GACP,GAAO,EADI,EAAA,IACM,GAAQ,EAAI,IAAO,QAZlC,EAAM,EAAI,EAAO,GAAK,EAiBvB,IAAI,EAAI,EAAG,EAAI,EAAO,EAAG,IACvB,IAAI,EAAI,EAAG,EAAI,EAAM,IAAK,CACvB,IAAA,EAAQ,GAAO,EAAI,GAAK,EAAO,GAC1B,EAAM,EAAI,EAAO,KACjB,EAAO,SAAW,IAAU,EAAO,UAC5C,EAAM,EAAI,EAAO,GAAK,EAAO,aAKnC,EAAA,EAAA,KAAA,KACE,EAAM,IAAI,SAAA,GAAK,OAAA,EAAY,KAC3B,EACA,EA9Ce,GAAA,GAiDf,IACD,KAKI,IADC,IAAA,EAAO,GACJ,EAAI,EAAG,EAAI,EAAM,OAAQ,GAAK,EACrC,EAAK,KAAK,EAAM,MAAM,EAAG,EAAI,IAKzB,IAAA,EAAO,IAAI,EAAS,GAC1B,EAAK,QAAQ,GAEP,IAAA,EAAY,EACf,IAAI,SAAC,EAAc,GAAO,OAAnB,EAAA,SAA8B,GAAK,IAC1C,OAAO,SAAA,GAAK,OAAO,IAAP,IAtEN,OAuET,EAAK,mBAAmB,GAExB,EAAK,KAAO,EAzEH,EA2Fb,OA3F2B,EAAA,EAAA,GA4EzB,EAAA,UAAA,aAAA,SAAa,QAAA,IAAA,IAAA,GAAA,GAKJ,IAJD,IAEF,EACA,EAHI,EAAF,KAAE,KAAM,EAAR,KAAQ,KACV,GAAQ,GAGJ,GAAO,CACb,EAAI,EAAA,KAAK,KAAK,GACd,EAAI,EAAA,KAAK,KAAK,KACN,KAAA,aAAA,CAAA,EAAA,EAAA,EAAA,IAAA,MACI,WAAa,IACvB,GAAQ,GAGL,OAAA,KAAK,cAAc,CAAE,EAAC,EAAE,EAAC,KAEpC,EA3FA,CAA2B,EAAA,SAAd,QAAA,MAAA;;ACZA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAHb,IAAA,EAAA,QAAA,YAGA,EAAA,WAAA,SAAA,KAuCA,OAtCE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GAE1B,IAAA,EAAA,EAAA,IAAK,EAAA,EAAA,SAAU,EAAA,EAAA,MAGb,GAHoB,EAAA,SAOtB,OAHA,EAAO,UAAiB,EAAL,EACnB,EAAO,MAAM,EAAI,QACjB,EAAO,MAAM,EAAI,IAIX,IACF,EADE,EAAA,EACO,EAAK,EACd,EAFK,EAAA,EAEI,EAAK,EACd,EAAI,EAAA,UAAU,EAAQ,EAAO,IAAK,EAAI,GAChC,IAAR,EAAE,GAAmB,IAAR,EAAE,IACjB,EAAE,GAAK,KAAK,KAAK,GACjB,EAAE,GAAK,KAAK,KAAK,IAEnB,EAAI,GAAK,EAAE,EACX,EAAI,GAAK,EAAE,EAGP,EAAE,GAAK,EAAE,GACX,EAAO,MAAM,GAAM,EAAI,IAAQ,GAAK,EAChC,EAAE,EAAI,IACR,EAAO,MAAM,GAAK,EAClB,EAAO,OAAO,EAAI,IAEhB,EAAE,EAAI,IACR,EAAO,MAAM,EAAI,EACjB,EAAO,OAAO,EAAI,IAGpB,EAAO,MAAM,GAAM,EAAI,GAAO,GAAK,EAAI,GAG7C,EAvCA,GAAa,QAAA,gBAAA;;ACOA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAVb,IAAA,EAAA,QAAA,YAIA,EAAA,EAAA,QAAA,wCACA,EAAA,QAAA,qBAGM,EAAU,IAAI,EAAA,QAAQ,EAAA,SAE5B,EAAA,SAAA,GAME,SAAA,EAAY,EAAuB,GAAnC,IAAA,EACE,EAAA,KAAA,KAAM,EAAS,GAAI,KAAG,KAPb,OAQT,EAAK,SAAW,EAChB,EAAK,MAAQ,IACb,EAAK,OAAS,CAAE,EAAG,EAAG,EAAG,GACzB,EAAK,IAAM,EACX,EAAK,OAAS,CACZ,EAAG,EACH,EAAG,GACH,EAAG,GACH,EAAG,IAEL,EAAK,UAAW,EAEhB,EAAK,gBAAkB,IAAI,EAAA,gBApBlB,EAsBb,OAtB4B,EAAA,EAAA,GAsB5B,EAtBA,CAA4B,EAAA,YAAf,QAAA,OAAA;;ACJA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANb,IAAA,EAAA,QAAA,YAEA,EAAA,EAAA,QAAA,wCAEM,EAAU,IAAI,EAAA,QAAQ,EAAA,SAE5B,EAAA,SAAA,GACE,SAAA,IAAA,IAAA,EACE,EAAA,KAAA,KAAM,EAAS,GAAI,KAAG,KAFb,OAGT,EAAK,OAAS,CACZ,EAAG,EACH,EAAG,GACH,EAAG,GACH,EAAG,IAEL,EAAK,MAAM,EAAI,EACf,EAAK,MAAM,EAAI,EAVN,EAYb,OAZ4B,EAAA,EAAA,GAY5B,EAZA,CAA4B,EAAA,YAAf,QAAA,OAAA;;ACFA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,YAEA,EAAA,QAAA,SAEA,EAAA,WAAA,SAAA,KAqDA,OApDE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GAE1B,IAOE,EACA,EARF,EAAA,EAAA,IAAK,EAAA,EAAA,MAAO,EAAA,EAAA,MAAO,EAAA,EAAA,OAAQ,EAAA,EAAA,SAAU,EAAA,EAAA,MAGjC,EAAQ,EAAA,OAAO,MAAM,EAAQ,GAC7B,EAAW,EAAA,OAAO,SAAS,EAAQ,GACrC,EAAK,EACL,EAAK,EAID,OAAA,EAAM,OACP,KAAA,EAAA,UAAU,OACb,EAAK,KAAK,IAAI,GAAS,EAAQ,EAC/B,EAAK,KAAK,IAAI,GAAS,EAAQ,EAC3B,EAAW,IACb,EAAM,IAAI,EAAA,UAAU,OAEtB,MACG,KAAA,EAAA,UAAU,MACb,GAAM,KAAK,IAAI,GAAS,EAAQ,EAChC,GAAM,KAAK,IAAI,GAAS,EAAQ,EAC5B,EAAW,MACT,EAAA,KAAK,UAAU,IACjB,EAAM,IAAI,EAAA,UAAU,QACpB,EAAI,SAAW,CACb,EAAG,EAAI,EAAI,EAAA,KAAK,MAAM,IAAK,KAC3B,EAAG,EAAI,EAAI,EAAA,KAAK,MAAM,IAAK,OAG7B,EAAM,IAAI,EAAA,UAAU,SAGxB,MACG,KAAA,EAAA,UAAU,OACb,EAAgB,EAAA,KAAK,MAAM,EAAU,GACrC,EAAmB,EAAA,KAAK,SAAS,EAAK,GAEtC,EAAK,KAAK,IAAI,GAAiB,EAAQ,EACvC,EAAK,KAAK,IAAI,GAAiB,EAAQ,EACnC,EAAmB,IACrB,EAAM,IAAI,EAAA,UAAU,OAI1B,EAAI,GAAK,EACT,EAAI,GAAK,EAET,EAAM,GAAM,EAAI,GAAO,GAAK,EAAI,EAChC,EAAM,OAAO,IAEjB,EArDA,GAAa,QAAA,aAAA;;ACaA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBb,IAWY,EAXZ,EAAA,QAAA,YAIA,EAAA,EAAA,QAAA,wCACA,EAAA,QAAA,kBACA,EAAA,QAAA,kBAGM,EAAU,IAAI,EAAA,QAAQ,EAAA,UAE5B,SAAY,GACV,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,OAAA,GAAA,SAHF,CAAY,EAAA,QAAA,YAAA,QAAA,UAAS,KAMrB,IAAA,EAAA,SAAA,GAOE,SAAA,EAAY,GAAZ,IAAA,EACE,EAAA,KAAA,KAAM,EAAS,GAAI,KAAG,KARb,OAST,EAAK,OAAS,CACZ,EAAG,EACH,EAAG,EACH,EAAG,GACH,EAAG,IAEL,EAAK,MAAM,EAAI,EACf,EAAK,MAAM,EAAI,EACf,EAAK,IAAM,CACT,GAAI,EACJ,EAAG,GAEL,EAAK,MAAQ,EAAA,KAAK,KAAK,IAAK,KAC5B,EAAK,OAAS,EACd,EAAK,SAAW,KAEhB,EAAK,MAAQ,IAAI,EAAA,MAAM,EAAU,QACjC,EAAK,gBAAkB,IAAI,EAAA,aA1BlB,EA4Bb,OA5ByB,EAAA,EAAA,GA4BzB,EA5BA,CAAyB,EAAA,YAAZ,QAAA,IAAA;;ACbA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAb,IAAA,EAAA,WAAA,SAAA,KAYA,OAXE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GACpB,IAAA,EAAA,EAAA,IAAK,EAAA,EAAA,MAAO,EAAA,EAAA,IAGpB,EAAI,GAAK,EAAQ,EAAK,EAAI,EAC1B,EAAI,GAAK,EAAQ,EAAK,EAAI,GAErB,EAAO,MAAQ,GAAM,IACxB,EAAO,MAAO,IAGpB,EAZA,GAAa,QAAA,gBAAA;;ACKA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IATb,IAAA,EAAA,QAAA,YAIA,EAAA,EAAA,QAAA,wCACA,EAAA,QAAA,qBAEM,EAAU,IAAI,EAAA,QAAQ,EAAA,SAE5B,EAAA,SAAA,GAKE,SAAA,EAAY,EAAkB,QAAA,IAAA,IAAA,EAAA,KAA9B,IAAA,EACE,EAAA,KAAA,KAAM,EAAS,GAAI,KAAG,KANb,OAOT,EAAK,OAAS,CACZ,EAAG,GACH,EAAG,GACH,EAAG,GACH,EAAG,IAEL,EAAK,MAAM,EAAI,EACf,EAAK,MAAM,EAAI,EACf,EAAK,MAAM,EAAI,GACf,EAAK,MAAM,EAAI,GACf,EAAK,MAAQ,EACb,EAAK,IAAM,EACX,EAAK,KAAO,EACZ,EAAK,SAAW,EAAA,KAAK,MAAM,EAAK,CAAE,EAAG,EAAG,EAAG,IAC3C,EAAK,gBAAkB,IAAI,EAAA,gBArBlB,EAuBb,OAvB4B,EAAA,EAAA,GAuB5B,EAvBA,CAA4B,EAAA,YAAf,QAAA,OAAA;;ACLA,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJb,IAAA,EAAA,QAAA,YAIA,EAAA,WAAA,SAAA,KAcA,OAbE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GACxB,EAAA,KAAK,UAAU,OACjB,EAAO,OAAS,GAEd,EAAO,OAAS,IAClB,EAAO,QAAU,EAEjB,EAAO,MAAM,EAAI,CAAC,EAAG,IAAK,EAAI,GAAO,GAAK,GACtC,EAAO,OAAS,GAClB,EAAO,iBAIf,EAdA,GAAa,QAAA,eAAA;;ACOA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAXb,IAAA,EAAA,QAAA,YAIA,EAAA,EAAA,QAAA,wCAEA,EAAA,QAAA,YACA,EAAA,QAAA,oBAEM,EAAU,IAAI,EAAA,QAAQ,EAAA,SAE5B,EAAA,SAAA,GAME,SAAA,EAAY,EAAgB,GAA5B,IAAA,EACE,EAAA,KAAA,KAAM,EAAS,GAAI,KAAG,KAPb,OAQT,EAAK,WAAa,QAClB,EAAK,MAAM,EAAI,EACf,EAAK,MAAM,EAAI,EACf,EAAK,OAAS,EACd,EAAK,OAAS,EACd,EAAK,OAAS,EAEd,EAAK,gBAAkB,IAAI,EAAA,eAflB,EAiCb,OAjC2B,EAAA,EAAA,GAkBzB,EAAA,UAAA,aAAA,WACQ,IAAE,EAAF,KAAE,OAAQ,EAAV,KAAU,OACV,EAAW,EAAA,OAAO,OAAO,MACzB,EAAY,EAAA,OAAO,OAAO,GAC1B,EAAQ,EAAA,KAAK,MAAM,EAAW,GAE9B,EAAI,KAAK,IAAI,GACb,EAAI,KAAK,IAAI,GAEb,EAAS,IAAI,EAAA,OAAO,CAAE,EAAC,EAAE,EAAC,GAAI,KACpC,EAAO,IAAI,EAAI,EAAS,EAAI,EAAO,EAAI,EACvC,EAAO,IAAI,EAAI,EAAS,EAAI,EAAO,EAAI,EAEvC,EAAO,IAEX,EAjCA,CAA2B,EAAA,YAAd,QAAA,MAAA;;ACyCb,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IApDA,IAAA,EAAA,QAAA,YAIA,EAAA,EAAA,QAAA,wCAKM,EAAU,IAAI,EAAA,QAAQ,EAAA,SAE5B,EAAA,SAAA,GAOE,SAAA,EAAY,EAAgB,GAA5B,IAAA,EACE,EAAA,KAAA,KAAM,EAAS,GAAI,KAAG,KAiC1B,OAhCI,EAAK,OAAS,CACZ,EAAG,EACH,EAAG,EACH,EAAG,GACH,EAAG,IAEL,EAAK,MAAM,EAAI,EACf,EAAK,MAAM,EAAI,EACf,EAAK,MAAQ,IACb,EAAK,OAAS,EACd,EAAK,SAAW,KAChB,EAAK,IAAM,EAEX,EAAK,gBAAkB,IAAI,EAmB/B,EAFA,OAvC2B,EAAA,EAAA,GAyBzB,EAAA,UAAA,SAAA,WAAA,IAAA,EAAA,KAEU,EAAF,KAAE,IAAK,EAAP,KAAO,OACP,EAAI,EAAI,cAAc,EAAA,OAAO,OAAO,OACpC,EAAI,EAAI,cAAc,EAAA,OAAO,OAAO,IACpC,EAAQ,YAAY,MACpB,EAAK,KAAK,MAChB,EAAI,KAAK,SAAS,EAAE,EAAG,EAAE,EAAG,EAAE,EAAG,EAAE,EAAG,SAAA,GACpC,EAAK,KAAO,GAAQ,GACd,IAAA,EAAM,YAAY,MACxB,QAAQ,IAAI,qBAAoB,EAAM,GAAK,MAAO,KAAK,MAAQ,KAEjE,EAAI,KAAK,aAEb,EAvCA,CAA2B,EAAA,YAAd,QAAA,MAAA,EAyCb,IAAA,EAAA,WAAA,SAAA,KAmCA,OAlCE,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GACpB,IAAA,EAAA,EAAA,IACH,KAAA,WAAW,EAAI,GAEpB,EAAI,GAAyB,GAApB,KAAK,IAAI,EAAI,KAGxB,EAAA,UAAA,WAAA,SAAW,EAAY,GAEnB,IAAA,EAAA,EAAA,IAAK,EAAA,EAAA,MAAO,EAAA,EAAA,KAAM,EAAA,EAAA,IAAK,EAAA,EAAA,OAGrB,GAAC,EAAK,OAAN,CAIE,IAAA,EAAO,EAAO,KAAK,GAEnB,EAAK,EAAK,EAAI,EAAI,OAAS,EAAI,EAAI,EAAO,GAC1C,EAAK,EAAK,EAAI,EAAI,OAAS,EAAI,EAAI,EAAO,GAE1C,EAAS,KAAK,IAAI,IAAO,EACzB,EAAS,KAAK,IAAI,IAAO,EAC1B,IAAQ,EAAI,GAAK,KAAK,KAAK,GAAM,EAAQ,GACzC,IAAQ,EAAI,GAAK,KAAK,KAAK,GAAM,EAAQ,GAG1C,GAAU,IACZ,EAAO,KAAO,EAAK,MAAM,GACE,IAAvB,EAAO,KAAK,QACd,EAAO,cAIf,EAnCA;;AC6CA,aAAA,IAAA,EAAA,MAAA,KAAA,WAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjGA,IAWK,EAXL,EAAA,QAAA,YAIA,EAAA,QAAA,WACA,EAAA,QAAA,qBACA,EAAA,QAAA,qBACA,EAAA,QAAA,kBACA,EAAA,QAAA,oBACA,EAAA,QAAA,qBAEA,SAAK,GACH,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,QAAA,GAAA,UACA,EAAA,EAAA,SAAA,GAAA,WAHF,CAAK,IAAA,EAAS,KAMd,IAAA,EAAA,SAAA,GAYE,SAAA,EAAY,EAAY,EAAuB,GAA/C,IAAA,EACE,EAAA,KAAA,OAAO,KACP,EAAK,EAAI,EAAK,EACd,EAAK,EAAI,EAAK,EACd,EAAK,SAAW,EAChB,EAAK,WAAa,EACZ,IAAA,EAAM,IAAI,EAAA,MAAM,EAAK,EAAG,EAAK,GAC7B,EAAS,IAAI,EAAA,OAAO,EAAU,GACpC,EAAO,IAAM,EAAI,eACjB,EAAO,IAAI,GAAK,EAEhB,EAAK,MAAQ,IAAI,EAAA,MAAM,EAAU,OAEjC,EAAK,QAAU,EAAK,IAAI,GACxB,EAAK,QAAU,EAAK,IAAI,IAAI,EAAA,WAC5B,EAAK,OAAS,EAAK,IAAI,GAGlB,IADC,IAAA,EAAU,EAAK,IAAI,IAAI,EAAA,WACpB,EAAI,EAAG,EAAI,EAAG,IACrB,EAAK,SAAS,EAAQ,IAAI,IAAI,EAAA,IAAI,KAEpC,EAAK,QAAU,EAGV,IAAI,EAAI,EAAG,EAAI,EAAG,IAAK,CACpB,IAAA,EAAI,EAAK,IAAI,IAAI,EAAA,MAAM,EAAQ,SAAA,GAAK,OAAA,EAAQ,IAAI,MAChD,EAAA,EAAA,cAAA,GAAE,EAAA,EAAA,EAAG,EAAA,EAAA,EACX,EAAE,IAAI,EAAI,EACV,EAAE,IAAI,EAAI,EAGN,IAAA,EAAQ,EAAK,IAAI,IAAI,EAAA,MAAM,EAAQ,IAqC7C,OApCI,EAAM,IAAI,EAAI,IACd,EAAM,IAAI,EAAI,IACd,EAAM,WACN,EAAK,MAAQ,EAGb,EAAK,gBAAkB,IAAI,EAE3B,EAAK,WACL,EAAK,MAAQ,EACb,EAAK,UAAY,EAAK,IACpB,IAAI,EAAA,KAAK,IAAK,CACZ,KAAM,iCACN,KAAM,OACN,MAAO,YAGX,EAAK,UAAU,IAAM,CAAE,EAAG,EAAK,EAAI,EAAG,EAAG,EAAK,EAAI,EAAI,IAmB1D,EAFA,OA9EgC,EAAA,EAAA,GAgE9B,EAAA,UAAA,SAAA,WAEO,IADC,IAAE,EAAF,KAAE,QAAS,EAAX,KAAW,QACR,EAAI,EAAG,EAAI,EAAG,IAAK,CAChB,EAAQ,IAAI,IAAI,EAAA,QACxB,IAAM,EAAQ,iBAIpB,EAAA,UAAA,SAAA,SAAS,GAIA,OAHP,EAAI,IAAI,EAAI,KAAK,EAAI,EAAA,KAAK,MAAM,EAAG,GACnC,EAAI,IAAI,EAAoB,GAAhB,EAAA,KAAK,KAAK,IACtB,EAAI,MAAQ,EAAA,KAAK,KAAK,IAAK,KACpB,GAEX,EA9EA,CAAgC,EAAA,WAAnB,QAAA,WAAA,EAgFb,IAAA,EAAA,SAAA,GAAA,SAAA,IAAA,OAAA,OAAA,GAAA,EAAA,MAAA,KAAA,YAAA,KAiEA,OAjE4B,EAAA,EAAA,GAC1B,EAAA,UAAA,OAAA,SAAO,EAAY,EAAW,GAE1B,IAAA,EAAA,EAAA,SAAmB,GAAT,EAAA,QAAS,EAAA,QAAiB,GAAT,EAAA,QAAS,EAAA,OAG9B,OAAA,EAAM,OACP,KAAA,EAAU,MACT,EAAM,QACR,EAAK,UAAU,KAAO,aAEpB,EAAM,KAAO,IACf,EAAK,UAAU,KAAO,IACtB,EAAM,IAAI,EAAU,UAEtB,MAEG,KAAA,EAAU,QACb,EAAA,UAAM,OAAM,KAAA,KAAC,EAAI,EAAG,GACf,KAAA,cAAc,GACnB,MAEG,KAAA,EAAU,SACT,EAAM,QACR,EAAO,UAAW,EAClB,EAAK,UAAU,KAAO,gBAAgB,EAAK,OAE7C,EAAA,UAAM,OAAM,KAAA,KAAC,EAAI,EAAG,GAGhB,EAAO,UAAY,EAAS,QAC9B,EAAK,aAKX,EAAM,OAAO,IAGf,EAAA,UAAA,cAAA,SAAc,GACJ,IAAA,EAAA,EAAA,QAAS,EAAA,EAAA,OAAQ,EAAA,EAAA,QAAS,EAAA,EAAA,MAAO,EAAA,EAAA,MAEzC,EAAQ,IAAI,SAAA,GACN,EAAA,OAAO,IAAI,EAAQ,KACrB,EAAM,IAAI,EAAU,UACpB,EAAO,MAAO,KAId,EAAA,OAAO,IAAI,EAAQ,KACrB,EAAO,UAAW,EAClB,EAAM,IAAI,EAAU,WAItB,EAAA,OAAO,KAAK,EAAQ,EAAS,SAAA,GAC3B,EAAE,MAAO,EACT,EAAK,QAC2B,IAA5B,EAAQ,SAAS,SACnB,EAAK,WACL,EAAK,OAAS,GAEhB,EAAK,UAAU,KAAO,EAAK,MAAM,cAGvC,EAjEA,CAA4B,EAAA;;ACtF5B,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAXA,IAAA,EAAA,QAAA,YACA,EAAA,QAAA,gBAEM,EAAO,IAAI,EAAA,KAAK,IAAS,KACzB,EAAO,IAAI,EAAA,YAEX,EAAY,SAAZ,IACJ,EAAK,MAAQ,IAAI,EAAA,WAAW,EAAM,EAAM,IAG1C,IACA,EAAK","file":"game.2ea7dcc4.js","sourceRoot":"../../src","sourcesContent":["\r\nexport class Vec {\r\n  x: number;\r\n  y: number;\r\n\r\n  static from(v: Vec) {\r\n    return new Vec().copy(v);\r\n  }\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  mag(): number {\r\n    const { x, y } = this;\r\n    return Math.sqrt(x * x + y * y);\r\n  }\r\n\r\n  set(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  copy({ x, y }: Vec) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  add({ x, y }: Vec) {\r\n    this.x += x;\r\n    this.y += y;\r\n    return this;\r\n  }\r\n\r\n  subtract({ x, y }: Vec) {\r\n    this.x -= x;\r\n    this.y -= y;\r\n    return this;\r\n  }\r\n\r\n  multiply(s: number) {\r\n    this.x *= s;\r\n    this.y *= s;\r\n    return this;\r\n  }\r\n\r\n  divide(s: number) {\r\n    this.x /= s;\r\n    this.y /= s;\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return Vec.from(this);\r\n  }\r\n\r\n  normalize() {\r\n    const mag = this.mag();\r\n    if (mag > 0) {\r\n      this.x /= mag;\r\n      this.y /= mag;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  dot({ x, y }: Vec) {\r\n    return this.x * x + this.y * y;\r\n  }\r\n}\r\n","import { Coordinates, HitBox } from '~gamelib/types';\nimport { UpdateBehaviour } from '~gamelib/behaviours/UpdateBehaviour';\nimport { EntityType } from './EntityTypeEnum';\nimport { Vec } from '../utils/Vec';\n\nexport abstract class Entity {\n  pos: Vec;\n  label: string;\n  updateBehaviour: UpdateBehaviour;\n  visible: boolean;\n  type: EntityType;\n  dead: boolean;\n  w: number;\n  h: number;\n  hitBox: HitBox;\n  rotation: number;\n  pivot: Coordinates | Vec;\n  anchor: Coordinates;\n  scale: Coordinates;\n  acc: Vec;\n  mass: number;\n  vel: Vec;\n\n  constructor() {\n    this.pos = new Vec();\n    this.visible = true;\n  }\n\n  update(dt: number, t: number) {\n    if (this.updateBehaviour) {\n      this.updateBehaviour.update(dt, t, this);\n    }\n  }\n\n  setPos(pos: Vec) {\n    this.pos = pos;\n  }\n\n  setIsDead(isDead: boolean) {\n    this.dead = isDead;\n  }\n}\n","import { UpdateBehaviour } from '~gamelib/behaviours/UpdateBehaviour';\nimport { Container } from '~gamelib/entities/Container';\n\nexport class ContainerUpdateBehaviour implements UpdateBehaviour {\n  update(dt: number, t: number, entity: Container): void {\n    const children = entity.children.filter(child => {\n      if (child.updateBehaviour || child.update) {\n        child.update(dt, t);\n      }\n      return !child.dead;\n    });\n\n    entity.setChildren(children);\n  }\n}\n","export enum EntityType {\n  Text,\n  Sprite,\n  Texture,\n  Container,\n  TileSprite,\n  Rect,\n}\n","import { Entity } from '~gamelib/entities/Entity';\nimport { ContainerUpdateBehaviour } from '~gamelib/behaviours/ContainerUpdateBehaviour';\nimport { EntityType } from './EntityTypeEnum';\nimport { Coordinates } from '~gamelib/types';\n\nexport class Container extends Entity {\n  children: Entity[];\n  path: Coordinates[];\n  style: { [key: string]: any };\n\n  constructor() {\n    super();\n    this.children = [];\n    this.type = EntityType.Container;\n    this.updateBehaviour = new ContainerUpdateBehaviour();\n  }\n\n  add<T extends Entity>(child: T): T {\n    this.children.push(child);\n    return child;\n  }\n\n  remove(child: Entity) {\n    this.children = this.children.filter(c => c !== child);\n    return child;\n  }\n\n  setChildren(children: Entity[]) {\n    this.children = children;\n  }\n\n  map(f: (entity: Entity) => void) {\n    return this.children.map(f);\n  }\n}\n","import { Entity } from '~gamelib/entities/Entity';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport abstract class EntityCanvasRenderer {\r\n  entityName: EntityType;\r\n  abstract render(ctx: CanvasRenderingContext2D, entity: Entity): void;\r\n}\r\n","import { Text } from '~gamelib/entities/Text';\r\nimport { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport class TextCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.Text;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: Text) {\r\n    const { font, fill, align } = entity.style;\r\n    if (font) ctx.font = font;\r\n    if (fill) ctx.fillStyle = fill;\r\n    if (align) ctx.textAlign = align;\r\n    ctx.fillText(entity.text, 0, 0);\r\n  }\r\n}\r\n","import { Sprite } from '~gamelib/entities/Sprite';\r\nimport { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport class SpriteCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.Sprite;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: Sprite) {\r\n    if (entity.anchor) ctx.translate(entity.anchor.x, entity.anchor.y);\r\n    if (entity.scale) ctx.scale(entity.scale.x, entity.scale.y);\r\n    if (entity.rotation) {\r\n      const px = entity.pivot ? entity.pivot.x : 0;\r\n      const py = entity.pivot ? entity.pivot.y : 0;\r\n      ctx.translate(px, py);\r\n      ctx.rotate(entity.rotation);\r\n      ctx.translate(-px, -py);\r\n    }\r\n    ctx.drawImage(entity.texture.img, 0, 0);\r\n  }\r\n}\r\n","import { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\nimport { TileSprite } from '~gamelib/entities/TileSprite';\r\n\r\nexport class TileSpriteCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.TileSprite;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: TileSprite) {\r\n    const { img } = entity.texture;\r\n    ctx.drawImage(\r\n      img,\r\n      entity.frame.x * entity.tileW, // source x\r\n      entity.frame.y * entity.tileH, // source y\r\n      entity.tileW, entity.tileH, // width & height\r\n      0, 0, // destination x & y\r\n      entity.tileW, entity.tileH, // destination width & height\r\n    );\r\n  }\r\n}\r\n","import { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { Rect } from '~gamelib/entities/Rect';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport class RectCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.Rect;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: Rect): void {\r\n    ctx.fillStyle = entity.style.fill;\r\n    ctx.fillRect(0, 0, entity.w, entity.h);\r\n  }\r\n}\r\n","import { EntityCanvasRenderer } from './EntityCanvasRenderer';\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\nimport { Container } from '~gamelib/entities/Container';\n\nexport class ContainerRenderer extends EntityCanvasRenderer {\n  constructor() {\n    super();\n    this.entityName = EntityType.Container;\n  }\n\n  render(ctx: CanvasRenderingContext2D, entity: Container): void {\n    if (entity.path) {\n      const [head, ...tail] = entity.path;\n      if (entity.path.length > 1) {\n        ctx.fillStyle = entity.style.fill || '#fff';\n        ctx.beginPath();\n        ctx.moveTo(head.x, head.y);\n        tail.forEach(({ x, y }) => ctx.lineTo(x, y));\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n  }\n}\n","export * from './EntityCanvasRenderer';\r\nexport * from './TextCanvasRenderer';\r\nexport * from './SpriteCanvasRenderer';\r\nexport * from './TileSpriteCanvasRenderer';\r\nexport * from './RectCanvasRenderer';\r\nexport * from './ContainerRenderer';\r\n","import { Container } from '~gamelib/entities/Container';\r\nimport {\r\n  TextCanvasRenderer,\r\n  SpriteCanvasRenderer,\r\n  EntityCanvasRenderer,\r\n  TileSpriteCanvasRenderer,\r\n  RectCanvasRenderer,\r\n  ContainerRenderer,\r\n} from './EntityRenderes';\r\n\r\nexport class CanvasRenderer {\r\n  w: number;\r\n  h: number;\r\n  view: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  renderes: EntityCanvasRenderer[];\r\n\r\n  constructor(w: number, h: number) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = w;\r\n    canvas.height = h;\r\n    this.w = w;\r\n    this.h = h;\r\n    this.view = canvas;\r\n    this.ctx = canvas.getContext('2d');\r\n    this.ctx.imageSmoothingEnabled = false;\r\n    this.ctx.textBaseline = 'top';\r\n\r\n    this.renderes = [\r\n      new TextCanvasRenderer(),\r\n      new SpriteCanvasRenderer(),\r\n      new TileSpriteCanvasRenderer(),\r\n      new RectCanvasRenderer(),\r\n      new ContainerRenderer(),\r\n    ];\r\n  }\r\n\r\n  render(container: Container, clear = true) {\r\n    if (container.visible === false) {\r\n      return;\r\n    }\r\n    const { ctx, renderes } = this;\r\n\r\n    function renderRec(cont: Container) {\r\n      // Render the container children\r\n      cont.children.forEach(child => {\r\n        if (child.visible === false) {\r\n          return;\r\n        }\r\n        ctx.save();\r\n\r\n        // Handle transforms\r\n        if (child.pos) {\r\n          ctx.translate(Math.round(child.pos.x), Math.round(child.pos.y));\r\n        }\r\n        if (child.anchor) ctx.translate(child.anchor.x, child.anchor.y);\r\n        if (child.scale) ctx.scale(child.scale.x, child.scale.y);\r\n        if (child.rotation) {\r\n          const px = child.pivot ? child.pivot.x : 0;\r\n          const py = child.pivot ? child.pivot.y : 0;\r\n          ctx.translate(px, py);\r\n          ctx.rotate(child.rotation);\r\n          ctx.translate(-px, -py);\r\n        }\r\n\r\n        const renderer = renderes.find(r => r.entityName === child.type);\r\n        if (renderer) {\r\n          renderer.render(ctx, child);\r\n        }\r\n\r\n        // Render any child sub-nodes\r\n        if (child instanceof Container) {\r\n          renderRec(child);\r\n        }\r\n        ctx.restore();\r\n      });\r\n    }\r\n\r\n    if (clear) {\r\n      ctx.clearRect(0, 0, this.w, this.h);\r\n    }\r\n\r\n    renderRec(container);\r\n  }\r\n}\r\n","const cache: { [key: string]: any } = {};\nconst readyListeners: any[] = [];\nconst progressListeners: any[] = [];\n\nlet completed = false;\nlet remaining = 0;\nlet total = 0;\n\nfunction done() {\n  completed = true;\n  readyListeners.forEach(cb => cb());\n}\n\n// Called when a queued asset is ready to use\nfunction onAssetLoad(e: any) {\n  if (completed) {\n    console.warn('Warning: asset defined after preload.', e.target);\n    return;\n  }\n\n  remaining--;\n  progressListeners.forEach(cb => cb(total - remaining, total));\n  if (remaining === 0) {\n    // We're done loading\n    done();\n  }\n}\n\n// Helper function for queuing assets\nfunction load(url: string, maker: (url: string, onLoad: (e: any) => void) => void) {\n  let cacheKey = url;\n  while (cacheKey.startsWith('../')) {\n    cacheKey = url.slice(3);\n  }\n  if (cache[cacheKey]) {\n    return cache[cacheKey];\n  }\n  const asset = maker(url, onAssetLoad);\n  remaining++;\n  total++;\n\n  cache[cacheKey] = asset;\n  return asset;\n}\n\nexport const Assets = {\n  get completed() {\n    return completed;\n  },\n\n  onReady(cb: () => void) {\n    if (completed) {\n      return cb();\n    }\n\n    readyListeners.push(cb);\n    // No assets to load\n    if (remaining === 0) {\n      done();\n    }\n  },\n\n  onProgress(cb: () => void) {\n    progressListeners.push(cb);\n  },\n\n  image(url: string) {\n    return load(url, (url: string, onAssetLoad: (e: any) => void) => {\n      const img = new Image();\n      img.src = url;\n      img.addEventListener('load', onAssetLoad, false);\n      return img;\n    });\n  },\n\n  sound(url: string) {\n    return load(url, (url: string, onAssetLoad: (e: any) => void) => {\n      const audio = new Audio();\n      audio.src = url;\n      const onLoad = e => {\n        audio.removeEventListener('canplay', onLoad);\n        onAssetLoad(e);\n      };\n      audio.addEventListener('canplay', onLoad, false);\n      return audio;\n    }).cloneNode();\n  },\n};\n","import { Entity } from '~gamelib/entities/Entity';\nimport { Assets } from '~gamelib/Assets';\n\nexport class Texture extends Entity {\n  img: HTMLImageElement;\n\n  constructor(url: string) {\n    super();\n    this.img = Assets.image(url);\n  }\n}\n","import { Entity } from '~gamelib/entities/Entity';\nimport { Texture } from '~gamelib/entities/Texture';\nimport { EntityType } from './EntityTypeEnum';\n\nexport class Sprite extends Entity {\n  texture: Texture;\n  scale: { x: number; y: number };\n  anchor: { x: number; y: number };\n  pivot: { x: number; y: number };\n  rotation: number;\n\n  constructor(texture: Texture) {\n    super();\n    this.texture = texture;\n    this.type = EntityType.Sprite;\n    this.scale = { x: 1, y: 1 };\n    this.anchor = { x: 0, y: 0 };\n    this.pivot = { x: 0, y: 0 };\n    this.rotation = 0;\n  }\n}\n","import { Entity } from '~gamelib/entities/Entity';\nimport { EntityType } from './EntityTypeEnum';\n\nexport class Text extends Entity {\n  text: string;\n  style: { [key: string]: any };\n\n  constructor(text = '', style = {}) {\n    super();\n    this.type = EntityType.Text;\n    this.text = text;\n    this.style = style;\n  }\n}\n","import { Entity } from './Entity';\r\nimport { EntityType } from './EntityTypeEnum';\r\nimport { Vec } from '~gamelib/utils/Vec';\r\n\r\nexport class Rect extends Entity {\r\n  style: { [key: string]: string };\r\n\r\n  constructor(w: number, h: number, style = { fill: '#333' }) {\r\n    super();\r\n    this.type = EntityType.Rect;\r\n    this.pos = new Vec(0, 0);\r\n    this.w = w;\r\n    this.h = h;\r\n    this.style = style;\r\n  }\r\n}\r\n","\ntype KeysState = { [key: string]: boolean; };\n\nexport class KeyControls {\n  keys: KeysState;\n\n  constructor(enabled = true) {\n    this.keys = {};\n\n    if (enabled) {\n      // Bind event handlers\n      document.addEventListener('keydown', e => {\n        if ([37, 38, 39, 40, 32].indexOf(e.which) >= 0) {\n          e.preventDefault();\n        }\n        this.keys[e.which] = true;\n      }, false);\n\n      document.addEventListener('keyup', e => {\n        this.keys[e.which] = false;\n      }, false);\n    }\n  }\n\n  key(key: string, value: boolean) {\n    if (value !== undefined) {\n      this.keys[key] = value;\n    }\n    return this.keys[key];\n  }\n\n  reset() {\n    Object\n      .keys(this.keys)\n      .forEach(key => {\n        this.keys[key] = false;\n      });\n  }\n\n  // Handle key actions\n  get action() {\n    return this.keys[32];\n  }\n\n  get x() {\n    if (this.keys[37] || this.keys[65]) {\n      return -1;\n    }\n    if (this.keys[39] || this.keys[68]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  get y() {\n    if (this.keys[38] || this.keys[87]) {\n      return -1;\n    }\n    if (this.keys[40] || this.keys[83]) {\n      return 1;\n    }\n    return 0;\n  }\n}\n","import { Coordinates } from '~gamelib/types';\n\nexport class MouseControls {\n  el: HTMLCanvasElement;\n  pos: Coordinates;\n  isDown: boolean;\n  pressed: boolean;\n  released: boolean;\n\n  constructor(container: HTMLCanvasElement) {\n    this.el = container;\n\n    this.pos = { x: 0, y: 0 };\n    this.isDown = false;\n    this.pressed = false;\n    this.released = false;\n\n    // Handlers\n    document.addEventListener('mousedown', e => this.down(e), false);\n    document.addEventListener('mouseup', () => this.up(), false);\n    document.addEventListener('mousemove', e => this.move(e), false);\n  }\n\n  mousePosFromEvent({ clientX, clientY }: MouseEvent) {\n    const { el, pos } = this;\n    const rect = el.getBoundingClientRect();\n    const xr = el.width / el.clientWidth;\n    const yr = el.height / el.clientHeight;\n    pos.x = (clientX - rect.left) * xr;\n    pos.y = (clientY - rect.top) * yr;\n  }\n\n  down(e: MouseEvent) {\n    this.isDown = true;\n    this.pressed = true;\n    this.mousePosFromEvent(e);\n  }\n\n  up() {\n    this.isDown = false;\n    this.released = true;\n  }\n\n  move(e: MouseEvent) {\n    this.mousePosFromEvent(e);\n  }\n\n  update() {\n    this.released = false;\n    this.pressed = false;\n  }\n}","import { Container } from './entities/Container';\r\nimport { CanvasRenderer } from './renderer/CanvasRenderer';\r\n\r\ntype GameUpdateFunc = (dt: number, t: number) => void;\r\nconst STEP = 1 / 60;\r\nconst MAX_FRAME = STEP * 5;\r\nconst MULTIPLIER = 1;\r\nconst SPEED = STEP * MULTIPLIER;\r\n\r\nexport class Game {\r\n  w: number;\r\n  h: number;\r\n  parent: string;\r\n  renderer: CanvasRenderer;\r\n  scene: Container;\r\n\r\n  constructor(w: number, h: number, parent: string = '#board') {\r\n    this.w = w;\r\n    this.h = h;\r\n    this.renderer = new CanvasRenderer(w, h);\r\n    document.querySelector(parent).appendChild(this.renderer.view);\r\n\r\n    this.scene = new Container();\r\n  }\r\n\r\n  run(gameUpdate: GameUpdateFunc = (): void => { }) {\r\n    let dt = 0;\r\n    let last = 0;\r\n    const loopy = (ms: number): void => {\r\n      requestAnimationFrame(loopy);\r\n\r\n      const t = ms / 1000; // Let's work in seconds\r\n      dt += Math.min(t - last, MAX_FRAME);\r\n      last = t;\r\n\r\n      while (dt >= SPEED) {\r\n        this.scene.update(STEP, t / MULTIPLIER);\r\n        gameUpdate(STEP, t / MULTIPLIER);\r\n        dt -= SPEED;\r\n      }\r\n      this.renderer.render(this.scene);\r\n    };\r\n\r\n    const init = (ms: number): void => {\r\n      last = ms / 1000;\r\n      requestAnimationFrame(loopy);\r\n    };\r\n\r\n    requestAnimationFrame(init);\r\n  }\r\n}\r\n","import { Coordinates } from '~gamelib/types';\r\n\r\nlet { random } = Math;\r\nconst randf = (min: number, max: number = null) => {\r\n  if (max == null) {\r\n    max = min || 1;\r\n    min = 0;\r\n  }\r\n  return random() * (max - min) + min;\r\n};\r\n\r\nconst rand = (min: number, max: number = null) => Math.floor(randf(min, max));\r\n\r\nconst randOneIn = (max: number = 2) => rand(0, max) === 0;\r\n\r\nconst randOneFrom = <T>(items: T[]): T => items[rand(items.length)];\r\n\r\nconst distance = (a: Coordinates, b: Coordinates): number => {\r\n  const dx = a.x - b.x;\r\n  const dy = a.y - b.y;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n};\r\n\r\nconst clamp = (x: number, min: number, max: number) => Math.max(min, Math.min(x, max));\r\n\r\nconst angle = (a: Coordinates, b: Coordinates) => {\r\n  const dx = a.x - b.x;\r\n  const dy = a.y - b.y;\r\n  const angle = Math.atan2(dy, dx);\r\n\r\n  return angle;\r\n};\r\n\r\n\r\nlet seed = 42;\r\nconst randomSeed = (s: number = NaN) => {\r\n  if (!isNaN(s)) {\r\n    seed = s;\r\n  }\r\n  return seed;\r\n};\r\n\r\nconst randomSeeded = () => {\r\n  // https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n  seed = (seed * 16807 + 0) % 2147483647;\r\n  return seed / 2147483647;\r\n};\r\n\r\nconst useSeededRandom = (blnUse = true) => {\r\n  randomSeeded();\r\n  random = blnUse ? randomSeeded : Math.random;\r\n};\r\n\r\nexport const math = {\r\n  randf,\r\n  rand,\r\n  randOneFrom,\r\n  randOneIn,\r\n  distance,\r\n  clamp,\r\n  angle,\r\n  useSeededRandom,\r\n  randomSeed,\r\n  randomSeeded,\r\n};\r\n","import { Entity } from '../entities/Entity';\r\nimport { Container } from '../entities/Container';\r\nimport { Rect } from '../entities/Rect';\r\nimport { math } from './math';\r\nimport { HitBox } from '../types';\r\n\r\nconst center = (entity: Entity) => {\r\n  const { pos, w, h } = entity;\r\n  return {\r\n    x: pos.x + w / 2,\r\n    y: pos.y + h / 2,\r\n  };\r\n};\r\n\r\nconst distance = (a: Entity, b: Entity) => math.distance(center(a), center(b));\r\n\r\nconst addDebug = (e: Container) => {\r\n  e.children = e.children || [];\r\n  const bb = new Rect(e.w, e.h, { fill: 'rgba(255, 0, 0, 0.3)' });\r\n  e.children.push(bb);\r\n  if (e.hitBox) {\r\n    const {\r\n      x, y, w, h,\r\n    } = e.hitBox;\r\n    const hb = new Rect(w, h, { fill: 'rgba(255, 0, 0, 0.5)' });\r\n    hb.pos.x = x;\r\n    hb.pos.y = y;\r\n    e.children.push(hb);\r\n  }\r\n  return e;\r\n};\r\n\r\n\r\nconst bounds = (entity: Entity): HitBox => {\r\n  const {\r\n    w, h, pos, hitBox,\r\n  } = entity;\r\n  const hit = hitBox || {\r\n    x: 0, y: 0, w, h,\r\n  };\r\n  return {\r\n    x: hit.x + pos.x,\r\n    y: hit.y + pos.y,\r\n    w: hit.w - 1,\r\n    h: hit.h - 1,\r\n  };\r\n};\r\n\r\nconst hit = (e1: Entity, e2: Entity) => {\r\n  const a = bounds(e1);\r\n  const b = bounds(e2);\r\n  return a.x + a.w >= b.x\r\n    && a.x <= b.x + b.w\r\n    && a.y + a.h >= b.y\r\n    && a.y <= b.y + b.h;\r\n};\r\n\r\nconst hits = (entity: Entity, container: Container, hitCallback: (e: Entity) => void) => {\r\n  const a = bounds(entity);\r\n  container.map(e2 => {\r\n    const b = bounds(e2);\r\n    if (\r\n      a.x + a.w >= b.x\r\n      && a.x <= b.x + b.w\r\n      && a.y + a.h >= b.y\r\n      && a.y <= b.y + b.h\r\n    ) {\r\n      hitCallback(e2);\r\n    }\r\n  });\r\n};\r\n\r\nconst angle = (a: Entity, b: Entity) => math.angle(center(a), center(b));\r\n\r\nexport const entity = {\r\n  center,\r\n  distance,\r\n  bounds,\r\n  hit,\r\n  hits,\r\n  addDebug,\r\n  angle,\r\n};\r\n","import { UpdateBehaviour } from './UpdateBehaviour';\r\nimport { AnimManager } from '~gamelib/AnimManager';\r\n\r\nexport class AnimManagerBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: AnimManager): void {\r\n    const { current, anims, frameSource } = entity;\r\n    if (!current) {\r\n      return;\r\n    }\r\n    const anim = anims[current];\r\n    anim.update(dt);\r\n\r\n    // Sync the tileSprite frame\r\n    frameSource.x = anim.frame.x;\r\n    frameSource.y = anim.frame.y;\r\n  }\r\n}\r\n","import { UpdateBehaviour } from './UpdateBehaviour';\r\nimport { Anim } from '~gamelib/AnimManager';\r\n\r\nexport class AnimBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Anim): void {\r\n    const { rate, frames } = entity;\r\n    entity.curTime += dt;\r\n    if (entity.curTime > rate) {\r\n      entity.curFrame++;\r\n      entity.frame = frames[entity.curFrame % frames.length];\r\n      entity.curTime -= rate;\r\n    }\r\n  }\r\n}\r\n","import { Coordinates } from './types';\r\nimport { TileSprite } from './entities/TileSprite';\r\nimport { Entity } from './entities/Entity';\r\nimport { AnimManagerBehaviour } from './behaviours/AnimManagerBehaviour';\r\nimport { AnimBehaviour } from './behaviours/AnimBehaviour';\r\n\r\nexport class Anim extends Entity {\r\n  frames: Coordinates[];\r\n  rate: number;\r\n  frame: Coordinates;\r\n  curFrame: number;\r\n  curTime: number;\r\n\r\n  constructor(frames: Coordinates[], rate: number) {\r\n    super();\r\n    this.frames = frames;\r\n    this.rate = rate;\r\n    this.updateBehaviour = new AnimBehaviour();\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    [this.frame] = this.frames;\r\n    this.curFrame = 0;\r\n    this.curTime = 0;\r\n  }\r\n}\r\n\r\nexport class AnimManager extends Entity {\r\n  anims: { [key: string]: Anim };\r\n  running: boolean;\r\n  frameSource: Coordinates;\r\n  current: string;\r\n\r\n  constructor(e: TileSprite) {\r\n    super();\r\n    this.anims = {};\r\n    this.running = false;\r\n    this.frameSource = e.frame;\r\n    this.current = null;\r\n\r\n    this.updateBehaviour = new AnimManagerBehaviour();\r\n  }\r\n\r\n  add(name: string, frames: Coordinates[], speed: number) {\r\n    this.anims[name] = new Anim(frames, speed);\r\n    return this.anims[name];\r\n  }\r\n\r\n  play(anim: string) {\r\n    const { current, anims } = this;\r\n    if (anim === current) {\r\n      return;\r\n    }\r\n    this.current = anim;\r\n    anims[anim].reset();\r\n  }\r\n\r\n  stop() {\r\n    this.current = null;\r\n  }\r\n}\r\n","import { Sprite } from './Sprite';\r\nimport { Texture } from './Texture';\r\nimport { Coordinates } from '~gamelib/types';\r\nimport { EntityType } from './EntityTypeEnum';\r\nimport { AnimManager } from '~gamelib/AnimManager';\r\n\r\nexport class TileSprite extends Sprite {\r\n  tileW: number;\r\n  tileH: number;\r\n  frame: Coordinates;\r\n  type: EntityType;\r\n  anims: AnimManager;\r\n\r\n  constructor(texture: Texture, w: number, h: number) {\r\n    super(texture);\r\n    this.type = EntityType.TileSprite;\r\n    this.tileW = w;\r\n    this.tileH = h;\r\n    this.frame = { x: 0, y: 0 };\r\n    this.anims = new AnimManager(this);\r\n  }\r\n\r\n  setFrame(frame: Coordinates) {\r\n    this.frame = frame;\r\n  }\r\n\r\n  get w() {\r\n    return this.tileW * Math.abs(this.scale.x);\r\n  }\r\n\r\n  get h() {\r\n    return this.tileH * Math.abs(this.scale.y);\r\n  }\r\n}\r\n","import { Container } from './Container';\r\nimport { Coordinates, HitBox } from '../types';\r\nimport { TileSprite } from './TileSprite';\r\nimport { Texture } from './Texture';\r\n\r\nexport class TileMap extends Container {\r\n  mapW: number;\r\n  mapH: number;\r\n  tileW: number;\r\n  tileH: number;\r\n  w: number;\r\n  h: number;\r\n  children: TileSprite[];\r\n\r\n  constructor(\r\n    tiles: Coordinates[],\r\n    mapW: number,\r\n    mapH: number,\r\n    tileW: number,\r\n    tileH: number,\r\n    texture: Texture,\r\n  ) {\r\n    super();\r\n\r\n    this.mapW = mapW;\r\n    this.mapH = mapH;\r\n    this.tileW = tileW;\r\n    this.tileH = tileH;\r\n    this.w = mapW * tileW;\r\n    this.h = mapH * tileH;\r\n\r\n    // Add all tile sprites\r\n    this.children = tiles.map((frame: Coordinates, i: number) => {\r\n      const s = new TileSprite(texture, tileW, tileH);\r\n      s.frame = frame;\r\n      s.pos.x = i % mapW * tileW;\r\n      s.pos.y = Math.floor(i / mapW) * tileH;\r\n      return s;\r\n    });\r\n  }\r\n\r\n\r\n  pixelToMapPos(pos: Coordinates) {\r\n    const { tileW, tileH } = this;\r\n    return {\r\n      x: Math.floor(pos.x / tileW),\r\n      y: Math.floor(pos.y / tileH),\r\n    };\r\n  }\r\n\r\n  mapToPixelPos(mapPos: Coordinates) {\r\n    const { tileW, tileH } = this;\r\n    return {\r\n      x: mapPos.x * tileW,\r\n      y: mapPos.y * tileH,\r\n    };\r\n  }\r\n\r\n  tileAtMapPos(mapPos: Coordinates) {\r\n    return this.children[mapPos.y * this.mapW + mapPos.x];\r\n  }\r\n\r\n  tileAtPixelPos(pos: Coordinates) {\r\n    return this.tileAtMapPos(this.pixelToMapPos(pos));\r\n  }\r\n\r\n  setFrameAtMapPos(mapPos: Coordinates, frame: Coordinates) {\r\n    const tile = this.tileAtMapPos(mapPos);\r\n    tile.frame = frame;\r\n    return tile;\r\n  }\r\n\r\n  setFrameAtPixelPos(pos: Coordinates, frame: Coordinates) {\r\n    return this.setFrameAtMapPos(this.pixelToMapPos(pos), frame);\r\n  }\r\n\r\n  tilesAtCorners(bounds: HitBox, xo = 0, yo = 0) {\r\n    return [\r\n      [bounds.x, bounds.y], // Top-left\r\n      [bounds.x + bounds.w, bounds.y], // Top-right\r\n      [bounds.x, bounds.y + bounds.h], // Bottom-left\r\n      [bounds.x + bounds.w, bounds.y + bounds.h], // Bottom-right\r\n    ].map(([x, y]) => this.tileAtPixelPos({\r\n      x: x + xo,\r\n      y: y + yo,\r\n    }));\r\n  }\r\n}\r\n","import { ContainerUpdateBehaviour } from './ContainerUpdateBehaviour';\r\nimport { UpdateBehaviour } from './UpdateBehaviour';\r\nimport { Camera } from '../entities/Camera';\r\n\r\nexport class CameraBehaviour extends ContainerUpdateBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Camera): void {\r\n    super.update(dt, t, entity);\r\n\r\n    if (entity.subject) {\r\n      entity.focus();\r\n    }\r\n  }\r\n}\r\n","import { Container } from './Container';\r\nimport { Dimensions, Coordinates } from '../types';\r\nimport { Entity } from './Entity';\r\nimport { Sprite } from './Sprite';\r\nimport { math } from '../utils/math';\r\nimport { CameraBehaviour } from '../behaviours/CameraBehaviour';\r\nimport { Vec } from '../utils/Vec';\r\n\r\nexport class Camera extends Container {\r\n  worldSize: Dimensions;\r\n  subject: Coordinates | Vec;\r\n  offset: Coordinates;\r\n\r\n  constructor(\r\n    subject: Entity | Coordinates, viewport: Dimensions, worldSize: Dimensions = viewport,\r\n  ) {\r\n    super();\r\n    this.w = viewport.w;\r\n    this.h = viewport.h;\r\n    this.worldSize = worldSize;\r\n    this.updateBehaviour = new CameraBehaviour();\r\n\r\n    this.setSubject(subject);\r\n  }\r\n\r\n  setSubject(e: Entity | Coordinates) {\r\n    if (e) {\r\n      this.subject = e instanceof Entity ? e.pos : e;\r\n    } else {\r\n      this.subject = this.pos;\r\n    }\r\n\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    // Center on the entity\r\n    if (e instanceof Entity) {\r\n      this.offset.x += e.w / 2;\r\n      this.offset.y += e.h / 2;\r\n    }\r\n\r\n    if (e instanceof Sprite) {\r\n      this.offset.x -= e.anchor.x;\r\n      this.offset.y -= e.anchor.y;\r\n    }\r\n\r\n    this.focus();\r\n  }\r\n\r\n  focus() {\r\n    const {\r\n      pos, w, h, worldSize, subject, offset,\r\n    } = this;\r\n\r\n    const centeredX = subject.x + offset.x - w / 2;\r\n    const maxX = worldSize.w - w;\r\n    const x = -math.clamp(centeredX, 0, maxX);\r\n\r\n    const centeredY = subject.y + offset.y - h / 2;\r\n    const maxY = worldSize.h - h;\r\n    const y = -math.clamp(centeredY, 0, maxY);\r\n\r\n    pos.x = x;\r\n    pos.y = y;\r\n  }\r\n}\r\n","import { Entity } from '../entities/Entity';\r\nimport { TileMap } from '../entities/TileMap';\r\nimport { entity } from '../utils/entity';\r\n\r\nexport const deadInTracks = (ent: Entity, map: TileMap, x = 0, y = 0) => {\r\n  const bounds = entity.bounds(ent);\r\n  const tiles = map.tilesAtCorners(bounds, x, y);\r\n  const walks = tiles.map(t => t && t.frame.walkable);\r\n  const blocked = walks.some(w => !w);\r\n  if (blocked) {\r\n    x = 0;\r\n    y = 0;\r\n  }\r\n  return { x, y };\r\n};\r\n","import { Entity } from '../entities/Entity';\r\nimport { TileMap } from '../entities/TileMap';\r\nimport { entity } from '../utils/entity';\r\n\r\nexport const wallSlide = (ent: Entity, map: TileMap, x = 0, y = 0) => {\r\n  let tiles;\r\n  let tileEdge;\r\n  const bounds = entity.bounds(ent);\r\n  const hits = {\r\n    up: false, down: false, left: false, right: false,\r\n  };\r\n\r\n  // Final amounts of movement to allow\r\n  let xo = x;\r\n  let yo = y;\r\n\r\n  // Check vertical movement\r\n  if (y !== 0) {\r\n    tiles = map.tilesAtCorners(bounds, 0, yo);\r\n    const [tl, tr, bl, br] = tiles.map(t => t && t.frame.walkable);\r\n\r\n    // Hit your head\r\n    if (y < 0 && !(tl && tr)) {\r\n      hits.up = true;\r\n      tileEdge = tiles[0].pos.y + tiles[0].h;\r\n      yo = tileEdge - bounds.y;\r\n    }\r\n    // Hit your feet\r\n    if (y > 0 && !(bl && br)) {\r\n      hits.down = true;\r\n      tileEdge = tiles[2].pos.y - 1;\r\n      yo = tileEdge - (bounds.y + bounds.h);\r\n    }\r\n  }\r\n\r\n  // Check horizontal movement\r\n  if (x !== 0) {\r\n    tiles = map.tilesAtCorners(bounds, xo, yo);\r\n    const [tl, tr, bl, br] = tiles.map(t => t && t.frame.walkable);\r\n\r\n    // Hit left tile\r\n    if (x < 0 && !(tl && bl)) {\r\n      hits.left = true;\r\n      tileEdge = tiles[0].pos.x + tiles[0].w;\r\n      xo = tileEdge - bounds.x;\r\n    }\r\n    // Hit right tile\r\n    if (x > 0 && !(tr && br)) {\r\n      hits.right = true;\r\n      tileEdge = tiles[1].pos.x - 1;\r\n      xo = tileEdge - (bounds.x + bounds.w);\r\n    }\r\n  }\r\n\r\n  // xo & yo contain the amount we're allowed to move by, and any hit tiles\r\n  return { x: xo, y: yo, hits };\r\n};\r\n","export class State<T> {\r\n  last: T;\r\n  state: T;\r\n  time: number;\r\n  justSetState: boolean;\r\n  first: boolean;\r\n\r\n  constructor(state: T) {\r\n    this.set(state);\r\n  }\r\n\r\n  set(state: T) {\r\n    this.last = this.state;\r\n    this.state = state;\r\n    this.time = 0;\r\n    this.justSetState = true;\r\n    this.first = true;\r\n  }\r\n\r\n  get() {\r\n    return this.state;\r\n  }\r\n\r\n  update(dt: number) {\r\n    this.first = this.justSetState;\r\n    this.time += this.first ? 0 : dt;\r\n    this.justSetState = false;\r\n  }\r\n\r\n  is(state: T) {\r\n    return this.state === state;\r\n  }\r\n\r\n  isIn(...states: T[]) {\r\n    return states.some(s => this.is(s));\r\n  }\r\n}\r\n","import { Entity } from '../entities/Entity';\nimport { Vec } from './Vec';\n\nconst applyForce = (e: Entity, force: Vec) => {\n  const { acc, mass = 1 } = e;\n  acc.x += force.x / mass;\n  acc.y += force.y / mass;\n};\n\nconst applyFriction = (e: Entity, amount: number) => {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount);\n  applyForce(e, friction);\n};\n\nconst applyHorizontalFriction = (e: Entity, amount: number) => {\n  const friction = e.vel\n    .clone()\n    .multiply(-1)\n    .normalize()\n    .multiply(amount);\n  applyForce(e, { x: friction.x, y: 0 } as Vec);\n};\n\nconst applyImpulse = (e: Entity, force: Vec, dt: number) => {\n  applyForce(e, { x: force.x / dt, y: force.y / dt } as Vec);\n};\n\nconst integrate = (e: Entity, dt: number) => {\n  const { vel, acc } = e;\n  const vx = vel.x + acc.x * dt;\n  const vy = vel.y + acc.y * dt;\n  const x = (vel.x + vx) / 2 * dt;\n  const y = (vel.y + vy) / 2 * dt;\n  vel.set(vx, vy);\n  acc.set(0, 0);\n  return { x, y } as Vec;\n};\n\nconst integratePos = (e: Entity, dt: number) => {\n  const dis = integrate(e, dt);\n  e.pos.add(dis);\n  return dis;\n};\n\nconst speed = ({ vel }: Entity) => Math.sqrt(vel.x * vel.x + vel.y * vel.y);\n\nexport const physics = {\n  applyForce,\n  applyImpulse,\n  integrate,\n  integratePos,\n  speed,\n  applyFriction,\n  applyHorizontalFriction,\n};\n","import { SoundOptions } from './SoundTypes';\nimport { Assets } from '../Assets';\n\nexport class Sound {\n  src: string;\n  options: SoundOptions;\n  audio: HTMLAudioElement;\n  playing: boolean;\n\n  constructor(src: string, options: SoundOptions = {}) {\n    this.playing = false;\n    this.src = src;\n    this.options = { volume: 1, ...options };\n\n    // Configure audio element\n    const audio = Assets.sound(src);\n    audio.src = src;\n    if (options.loop) {\n      audio.loop = true;\n    }\n    audio.addEventListener(\n      'error',\n      () => {\n        throw Error(`Error loading audio: ${src}`);\n      },\n      false,\n    );\n\n    audio.addEventListener(\n      'ended',\n      () => {\n        this.playing = false;\n      },\n      false,\n    );\n    this.audio = audio;\n  }\n\n  play(overrides: SoundOptions = {}) {\n    const { audio, options } = this;\n    const opts: SoundOptions = { time: 0, ...options, ...overrides };\n    audio.volume = opts.volume;\n    audio.currentTime = opts.time;\n    audio.play();\n    this.playing = true;\n  }\n\n  stop() {\n    this.audio.pause();\n    this.playing = false;\n  }\n\n  get volume() {\n    return this.audio.volume;\n  }\n\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume;\n  }\n}\n","\nimport { Sound } from './Sound';\nimport { SoundOptions } from './SoundTypes';\n\nexport class SoundPool {\n  count: number;\n  sounds: Sound[];\n\n  constructor(src: string, options: SoundOptions = {}, poolSize = 3) {\n    this.count = 0;\n    this.sounds = [...Array(poolSize)]\n      .map(() => new Sound(src, options));\n  }\n\n  // play one of audio instance of the pool\n  play(options: SoundOptions) {\n    const { sounds } = this;\n    const index = this.count++ % sounds.length;\n    sounds[index].play(options);\n  }\n\n  // stop ALL audio instance of the pool\n  stop() {\n    this.sounds.forEach(sound => sound.stop());\n  }\n}","import { Sound } from './Sound';\nimport { SoundOptions } from './SoundTypes';\nimport { math } from '~gamelib/utils/math';\n\nexport class SoundGroup {\n  sounds: Sound[];\n\n  constructor(sounds: Sound[]) {\n    this.sounds = sounds;\n  }\n\n  // play one of the audio group (random)\n  play(opts: SoundOptions = {}) {\n    const { sounds } = this;\n    math.randOneFrom(sounds).play(opts);\n  }\n\n  // stop ALL audio instance of the group\n  stop() {\n    this.sounds.forEach(sound => sound.stop());\n  }\n}\n","export * from './renderer/CanvasRenderer';\r\nexport * from './entities/Container';\r\nexport * from './entities/Texture';\r\nexport * from './entities/Sprite';\r\nexport * from './entities/Text';\r\nexport * from './entities/Rect';\r\nexport * from './controls/KeyControls';\r\nexport * from './controls/MouseControls';\r\nexport * from './behaviours/UpdateBehaviour';\r\nexport * from './behaviours/ContainerUpdateBehaviour';\r\nexport * from './types/index';\r\nexport * from './game';\r\nexport * from './utils/math';\r\nexport * from './utils/entity';\r\nexport * from './entities/TileMap';\r\nexport * from './entities/TileSprite';\r\nexport * from './entities/Camera';\r\nexport * from './movement/deadInTracks';\r\nexport * from './movement/wallSlide';\r\nexport * from './State';\r\nexport * from './utils/Vec';\r\nexport * from './utils/physics';\r\nexport * from './sounds/Sound';\r\nexport * from './sounds/SoundPool';\r\nexport * from './sounds/SoungGroup';\r\nexport * from './Assets';\r\n","/**\n * Represents a single instance of EasyStar.\n * A path that is in the queue to eventually be found.\n */\nmodule.exports = function() {\n    this.pointsToAvoid = {};\n    this.startX;\n    this.callback;\n    this.startY;\n    this.endX;\n    this.endY;\n    this.nodeHash = {};\n    this.openList;\n};","/**\n* A simple Node that represents a single tile on the grid.\n* @param {Object} parent The parent node.\n* @param {Number} x The x position on the grid.\n* @param {Number} y The y position on the grid.\n* @param {Number} costSoFar How far this node is in moves*cost from the start.\n* @param {Number} simpleDistanceToTarget Manhatten distance to the end point.\n**/\nmodule.exports = function(parent, x, y, costSoFar, simpleDistanceToTarget) {\n    this.parent = parent;\n    this.x = x;\n    this.y = y;\n    this.costSoFar = costSoFar;\n    this.simpleDistanceToTarget = simpleDistanceToTarget;\n\n    /**\n    * @return {Number} Best guess distance of a cost using this node.\n    **/\n    this.bestGuessDistance = function() {\n        return this.costSoFar + this.simpleDistanceToTarget;\n    }\n};","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","module.exports = require('./lib/heap');\n","/**\n*   EasyStar.js\n*   github.com/prettymuchbryce/EasyStarJS\n*   Licensed under the MIT license.\n*\n*   Implementation By Bryce Neal (@prettymuchbryce)\n**/\n\nvar EasyStar = {}\nvar Instance = require('./instance');\nvar Node = require('./node');\nvar Heap = require('heap');\n\nconst CLOSED_LIST = 0;\nconst OPEN_LIST = 1;\n\nmodule.exports = EasyStar;\n\nvar nextInstanceId = 1;\n\nEasyStar.js = function() {\n    var STRAIGHT_COST = 1.0;\n    var DIAGONAL_COST = 1.4;\n    var syncEnabled = false;\n    var pointsToAvoid = {};\n    var collisionGrid;\n    var costMap = {};\n    var pointsToCost = {};\n    var directionalConditions = {};\n    var allowCornerCutting = true;\n    var iterationsSoFar;\n    var instances = {};\n    var instanceQueue = [];\n    var iterationsPerCalculation = Number.MAX_VALUE;\n    var acceptableTiles;\n    var diagonalsEnabled = false;\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array|Number} tiles An array of numbers that represent\n    * which tiles in your grid should be considered\n    * acceptable, or \"walkable\".\n    **/\n    this.setAcceptableTiles = function(tiles) {\n        if (tiles instanceof Array) {\n            // Array\n            acceptableTiles = tiles;\n        } else if (!isNaN(parseFloat(tiles)) && isFinite(tiles)) {\n            // Number\n            acceptableTiles = [tiles];\n        }\n    };\n\n    /**\n    * Enables sync mode for this EasyStar instance..\n    * if you're into that sort of thing.\n    **/\n    this.enableSync = function() {\n        syncEnabled = true;\n    };\n\n    /**\n    * Disables sync mode for this EasyStar instance.\n    **/\n    this.disableSync = function() {\n        syncEnabled = false;\n    };\n\n    /**\n     * Enable diagonal pathfinding.\n     */\n    this.enableDiagonals = function() {\n        diagonalsEnabled = true;\n    }\n\n    /**\n     * Disable diagonal pathfinding.\n     */\n    this.disableDiagonals = function() {\n        diagonalsEnabled = false;\n    }\n\n    /**\n    * Sets the collision grid that EasyStar uses.\n    *\n    * @param {Array} grid The collision grid that this EasyStar instance will read from.\n    * This should be a 2D Array of Numbers.\n    **/\n    this.setGrid = function(grid) {\n        collisionGrid = grid;\n\n        //Setup cost map\n        for (var y = 0; y < collisionGrid.length; y++) {\n            for (var x = 0; x < collisionGrid[0].length; x++) {\n                if (!costMap[collisionGrid[y][x]]) {\n                    costMap[collisionGrid[y][x]] = 1\n                }\n            }\n        }\n    };\n\n    /**\n    * Sets the tile cost for a particular tile type.\n    *\n    * @param {Number} The tile type to set the cost for.\n    * @param {Number} The multiplicative cost associated with the given tile.\n    **/\n    this.setTileCost = function(tileType, cost) {\n        costMap[tileType] = cost;\n    };\n\n    /**\n    * Sets the an additional cost for a particular point.\n    * Overrides the cost from setTileCost.\n    *\n    * @param {Number} x The x value of the point to cost.\n    * @param {Number} y The y value of the point to cost.\n    * @param {Number} The multiplicative cost associated with the given point.\n    **/\n    this.setAdditionalPointCost = function(x, y, cost) {\n        if (pointsToCost[y] === undefined) {\n            pointsToCost[y] = {};\n        }\n        pointsToCost[y][x] = cost;\n    };\n\n    /**\n    * Remove the additional cost for a particular point.\n    *\n    * @param {Number} x The x value of the point to stop costing.\n    * @param {Number} y The y value of the point to stop costing.\n    **/\n    this.removeAdditionalPointCost = function(x, y) {\n        if (pointsToCost[y] !== undefined) {\n            delete pointsToCost[y][x];\n        }\n    }\n\n    /**\n    * Remove all additional point costs.\n    **/\n    this.removeAllAdditionalPointCosts = function() {\n        pointsToCost = {};\n    }\n\n    /**\n    * Sets a directional condition on a tile\n    *\n    * @param {Number} x The x value of the point.\n    * @param {Number} y The y value of the point.\n    * @param {Array.<String>} allowedDirections A list of all the allowed directions that can access\n    * the tile.\n    **/\n    this.setDirectionalCondition = function(x, y, allowedDirections) {\n        if (directionalConditions[y] === undefined) {\n            directionalConditions[y] = {};\n        }\n        directionalConditions[y][x] = allowedDirections;\n    };\n\n    /**\n    * Remove all directional conditions\n    **/\n    this.removeAllDirectionalConditions = function() {\n        directionalConditions = {};\n    };\n\n    /**\n    * Sets the number of search iterations per calculation.\n    * A lower number provides a slower result, but more practical if you\n    * have a large tile-map and don't want to block your thread while\n    * finding a path.\n    *\n    * @param {Number} iterations The number of searches to prefrom per calculate() call.\n    **/\n    this.setIterationsPerCalculation = function(iterations) {\n        iterationsPerCalculation = iterations;\n    };\n\n    /**\n    * Avoid a particular point on the grid,\n    * regardless of whether or not it is an acceptable tile.\n    *\n    * @param {Number} x The x value of the point to avoid.\n    * @param {Number} y The y value of the point to avoid.\n    **/\n    this.avoidAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] === undefined) {\n            pointsToAvoid[y] = {};\n        }\n        pointsToAvoid[y][x] = 1;\n    };\n\n    /**\n    * Stop avoiding a particular point on the grid.\n    *\n    * @param {Number} x The x value of the point to stop avoiding.\n    * @param {Number} y The y value of the point to stop avoiding.\n    **/\n    this.stopAvoidingAdditionalPoint = function(x, y) {\n        if (pointsToAvoid[y] !== undefined) {\n            delete pointsToAvoid[y][x];\n        }\n    };\n\n    /**\n    * Enables corner cutting in diagonal movement.\n    **/\n    this.enableCornerCutting = function() {\n        allowCornerCutting = true;\n    };\n\n    /**\n    * Disables corner cutting in diagonal movement.\n    **/\n    this.disableCornerCutting = function() {\n        allowCornerCutting = false;\n    };\n\n    /**\n    * Stop avoiding all additional points on the grid.\n    **/\n    this.stopAvoidingAllAdditionalPoints = function() {\n        pointsToAvoid = {};\n    };\n\n    /**\n    * Find a path.\n    *\n    * @param {Number} startX The X position of the starting point.\n    * @param {Number} startY The Y position of the starting point.\n    * @param {Number} endX The X position of the ending point.\n    * @param {Number} endY The Y position of the ending point.\n    * @param {Function} callback A function that is called when your path\n    * is found, or no path is found.\n    * @return {Number} A numeric, non-zero value which identifies the created instance. This value can be passed to cancelPath to cancel the path calculation.\n    *\n    **/\n    this.findPath = function(startX, startY, endX, endY, callback) {\n        // Wraps the callback for sync vs async logic\n        var callbackWrapper = function(result) {\n            if (syncEnabled) {\n                callback(result);\n            } else {\n                setTimeout(function() {\n                    callback(result);\n                });\n            }\n        }\n\n        // No acceptable tiles were set\n        if (acceptableTiles === undefined) {\n            throw new Error(\"You can't set a path without first calling setAcceptableTiles() on EasyStar.\");\n        }\n        // No grid was set\n        if (collisionGrid === undefined) {\n            throw new Error(\"You can't set a path without first calling setGrid() on EasyStar.\");\n        }\n\n        // Start or endpoint outside of scope.\n        if (startX < 0 || startY < 0 || endX < 0 || endY < 0 ||\n        startX > collisionGrid[0].length-1 || startY > collisionGrid.length-1 ||\n        endX > collisionGrid[0].length-1 || endY > collisionGrid.length-1) {\n            throw new Error(\"Your start or end point is outside the scope of your grid.\");\n        }\n\n        // Start and end are the same tile.\n        if (startX===endX && startY===endY) {\n            callbackWrapper([]);\n            return;\n        }\n\n        // End point is not an acceptable tile.\n        var endTile = collisionGrid[endY][endX];\n        var isAcceptable = false;\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (endTile === acceptableTiles[i]) {\n                isAcceptable = true;\n                break;\n            }\n        }\n\n        if (isAcceptable === false) {\n            callbackWrapper(null);\n            return;\n        }\n\n        // Create the instance\n        var instance = new Instance();\n        instance.openList = new Heap(function(nodeA, nodeB) {\n            return nodeA.bestGuessDistance() - nodeB.bestGuessDistance();\n        });\n        instance.isDoneCalculating = false;\n        instance.nodeHash = {};\n        instance.startX = startX;\n        instance.startY = startY;\n        instance.endX = endX;\n        instance.endY = endY;\n        instance.callback = callbackWrapper;\n\n        instance.openList.push(coordinateToNode(instance, instance.startX,\n            instance.startY, null, STRAIGHT_COST));\n\n        var instanceId = nextInstanceId ++;\n        instances[instanceId] = instance;\n        instanceQueue.push(instanceId);\n        return instanceId;\n    };\n\n    /**\n     * Cancel a path calculation.\n     *\n     * @param {Number} instanceId The instance ID of the path being calculated\n     * @return {Boolean} True if an instance was found and cancelled.\n     *\n     **/\n    this.cancelPath = function(instanceId) {\n        if (instanceId in instances) {\n            delete instances[instanceId];\n            // No need to remove it from instanceQueue\n            return true;\n        }\n        return false;\n    };\n\n    /**\n    * This method steps through the A* Algorithm in an attempt to\n    * find your path(s). It will search 4-8 tiles (depending on diagonals) for every calculation.\n    * You can change the number of calculations done in a call by using\n    * easystar.setIteratonsPerCalculation().\n    **/\n    this.calculate = function() {\n        if (instanceQueue.length === 0 || collisionGrid === undefined || acceptableTiles === undefined) {\n            return;\n        }\n        for (iterationsSoFar = 0; iterationsSoFar < iterationsPerCalculation; iterationsSoFar++) {\n            if (instanceQueue.length === 0) {\n                return;\n            }\n\n            if (syncEnabled) {\n                // If this is a sync instance, we want to make sure that it calculates synchronously.\n                iterationsSoFar = 0;\n            }\n\n            var instanceId = instanceQueue[0];\n            var instance = instances[instanceId];\n            if (typeof instance == 'undefined') {\n                // This instance was cancelled\n                instanceQueue.shift();\n                continue;\n            }\n\n            // Couldn't find a path.\n            if (instance.openList.size() === 0) {\n                instance.callback(null);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            var searchNode = instance.openList.pop();\n\n            // Handles the case where we have found the destination\n            if (instance.endX === searchNode.x && instance.endY === searchNode.y) {\n                var path = [];\n                path.push({x: searchNode.x, y: searchNode.y});\n                var parent = searchNode.parent;\n                while (parent!=null) {\n                    path.push({x: parent.x, y:parent.y});\n                    parent = parent.parent;\n                }\n                path.reverse();\n                var ip = path;\n                instance.callback(ip);\n                delete instances[instanceId];\n                instanceQueue.shift();\n                continue;\n            }\n\n            searchNode.list = CLOSED_LIST;\n\n            if (searchNode.y > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    0, -1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y-1));\n            }\n            if (searchNode.x < collisionGrid[0].length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    1, 0, STRAIGHT_COST * getTileCost(searchNode.x+1, searchNode.y));\n            }\n            if (searchNode.y < collisionGrid.length-1) {\n                checkAdjacentNode(instance, searchNode,\n                    0, 1, STRAIGHT_COST * getTileCost(searchNode.x, searchNode.y+1));\n            }\n            if (searchNode.x > 0) {\n                checkAdjacentNode(instance, searchNode,\n                    -1, 0, STRAIGHT_COST * getTileCost(searchNode.x-1, searchNode.y));\n            }\n            if (diagonalsEnabled) {\n                if (searchNode.x > 0 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, -1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, 1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y+1));\n                    }\n                }\n                if (searchNode.x < collisionGrid[0].length-1 && searchNode.y > 0) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y-1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x+1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            1, -1, DIAGONAL_COST * getTileCost(searchNode.x+1, searchNode.y-1));\n                    }\n                }\n                if (searchNode.x > 0 && searchNode.y < collisionGrid.length-1) {\n\n                    if (allowCornerCutting ||\n                        (isTileWalkable(collisionGrid, acceptableTiles, searchNode.x, searchNode.y+1, searchNode) &&\n                        isTileWalkable(collisionGrid, acceptableTiles, searchNode.x-1, searchNode.y, searchNode))) {\n\n                        checkAdjacentNode(instance, searchNode,\n                            -1, 1, DIAGONAL_COST * getTileCost(searchNode.x-1, searchNode.y+1));\n                    }\n                }\n            }\n\n        }\n    };\n\n    // Private methods follow\n    var checkAdjacentNode = function(instance, searchNode, x, y, cost) {\n        var adjacentCoordinateX = searchNode.x+x;\n        var adjacentCoordinateY = searchNode.y+y;\n\n        if ((pointsToAvoid[adjacentCoordinateY] === undefined ||\n             pointsToAvoid[adjacentCoordinateY][adjacentCoordinateX] === undefined) &&\n            isTileWalkable(collisionGrid, acceptableTiles, adjacentCoordinateX, adjacentCoordinateY, searchNode)) {\n            var node = coordinateToNode(instance, adjacentCoordinateX,\n                adjacentCoordinateY, searchNode, cost);\n\n            if (node.list === undefined) {\n                node.list = OPEN_LIST;\n                instance.openList.push(node);\n            } else if (searchNode.costSoFar + cost < node.costSoFar) {\n                node.costSoFar = searchNode.costSoFar + cost;\n                node.parent = searchNode;\n                instance.openList.updateItem(node);\n            }\n        }\n    };\n\n    // Helpers\n    var isTileWalkable = function(collisionGrid, acceptableTiles, x, y, sourceNode) {\n        var directionalCondition = directionalConditions[y] && directionalConditions[y][x];\n        if (directionalCondition) {\n            var direction = calculateDirection(sourceNode.x - x, sourceNode.y - y)\n            var directionIncluded = function () {\n                for (var i = 0; i < directionalCondition.length; i++) {\n                    if (directionalCondition[i] === direction) return true\n                }\n                return false\n            }\n            if (!directionIncluded()) return false\n        }\n        for (var i = 0; i < acceptableTiles.length; i++) {\n            if (collisionGrid[y][x] === acceptableTiles[i]) {\n                return true;\n            }\n        }\n\n        return false;\n    };\n\n    /**\n     * -1, -1 | 0, -1  | 1, -1\n     * -1,  0 | SOURCE | 1,  0\n     * -1,  1 | 0,  1  | 1,  1\n     */\n    var calculateDirection = function (diffX, diffY) {\n        if (diffX === 0 && diffY === -1) return EasyStar.TOP\n        else if (diffX === 1 && diffY === -1) return EasyStar.TOP_RIGHT\n        else if (diffX === 1 && diffY === 0) return EasyStar.RIGHT\n        else if (diffX === 1 && diffY === 1) return EasyStar.BOTTOM_RIGHT\n        else if (diffX === 0 && diffY === 1) return EasyStar.BOTTOM\n        else if (diffX === -1 && diffY === 1) return EasyStar.BOTTOM_LEFT\n        else if (diffX === -1 && diffY === 0) return EasyStar.LEFT\n        else if (diffX === -1 && diffY === -1) return EasyStar.TOP_LEFT\n        throw new Error('These differences are not valid: ' + diffX + ', ' + diffY)\n    };\n\n    var getTileCost = function(x, y) {\n        return (pointsToCost[y] && pointsToCost[y][x]) || costMap[collisionGrid[y][x]]\n    };\n\n    var coordinateToNode = function(instance, x, y, parent, cost) {\n        if (instance.nodeHash[y] !== undefined) {\n            if (instance.nodeHash[y][x] !== undefined) {\n                return instance.nodeHash[y][x];\n            }\n        } else {\n            instance.nodeHash[y] = {};\n        }\n        var simpleDistanceToTarget = getDistance(x, y, instance.endX, instance.endY);\n        if (parent!==null) {\n            var costSoFar = parent.costSoFar + cost;\n        } else {\n            costSoFar = 0;\n        }\n        var node = new Node(parent,x,y,costSoFar,simpleDistanceToTarget);\n        instance.nodeHash[y][x] = node;\n        return node;\n    };\n\n    var getDistance = function(x1,y1,x2,y2) {\n        if (diagonalsEnabled) {\n            // Octile distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            if (dx < dy) {\n                return DIAGONAL_COST * dx + dy;\n            } else {\n                return DIAGONAL_COST * dy + dx;\n            }\n        } else {\n            // Manhattan distance\n            var dx = Math.abs(x1 - x2);\n            var dy = Math.abs(y1 - y2);\n            return (dx + dy);\n        }\n    };\n}\n\nEasyStar.TOP = 'TOP'\nEasyStar.TOP_RIGHT = 'TOP_RIGHT'\nEasyStar.RIGHT = 'RIGHT'\nEasyStar.BOTTOM_RIGHT = 'BOTTOM_RIGHT'\nEasyStar.BOTTOM = 'BOTTOM'\nEasyStar.BOTTOM_LEFT = 'BOTTOM_LEFT'\nEasyStar.LEFT = 'LEFT'\nEasyStar.TOP_LEFT = 'TOP_LEFT'\n","import * as EasyStar from 'easystarjs';\r\nimport { TileMap, Texture, math } from '~gamelib';\r\n\r\nimport tiles from './res/images/bravedigger-tiles.png';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nconst tileIndexes = [\r\n  {\r\n    id: 'empty', x: 1, y: 2, walkable: true,\r\n  },\r\n  { id: 'wall', x: 2, y: 2 },\r\n  { id: 'wall_end', x: 3, y: 2 },\r\n];\r\n\r\nexport class Level extends TileMap {\r\n  path: EasyStar.js;\r\n\r\n  constructor(w: number, h: number) {\r\n    const tileSize = 48;\r\n    const mapW = Math.floor(w / tileSize);\r\n    const mapH = Math.floor(h / tileSize);\r\n\r\n    const getTile = (id: string) => tileIndexes.find(t => t.id === id);\r\n    const getIdx = (id: string) => tileIndexes.indexOf(getTile(id));\r\n\r\n    // Make a random dungeon\r\n    const level = Array(mapW * mapH).fill(0);\r\n    for (let y = 0; y < mapH; y++) {\r\n      for (let x = 0; x < mapW; x++) {\r\n        // Define the dungeon walls\r\n        // level[y * mapW + x] = math.randOneFrom([0, 0, 1]);\r\n\r\n        // 1. Map borders\r\n        if (y === 0 || x === 0 || y === mapH - 1 || x === mapW - 1) {\r\n          level[y * mapW + x] = 1;\r\n          continue;\r\n        }\r\n\r\n        // 2. Grid points - randomly skip some to make \"rooms\"\r\n        if (y % 2 || x % 2 || math.randOneIn(4)) {\r\n          continue; // don't draw a wall, please.\r\n        }\r\n        level[y * mapW + x] = 1;\r\n\r\n        // 3. Side walls - pick a random direction\r\n        const [xo, yo] = math.randOneFrom([[0, -1], [0, 1], [1, 0], [-1, 0]]);\r\n        level[(y + yo) * mapW + (x + xo)] = 1;\r\n      }\r\n    }\r\n\r\n    // \"3d-ify\" if no wall below a tile\r\n    for (let y = 0; y < mapH - 1; y++) {\r\n      for (let x = 0; x < mapW; x++) {\r\n        const below = level[(y + 1) * mapW + x];\r\n        const me = level[y * mapW + x];\r\n        if (me === getIdx('wall') && below !== getIdx('wall')) {\r\n          level[y * mapW + x] = getIdx('wall_end');\r\n        }\r\n      }\r\n    }\r\n\r\n    super(\r\n      level.map(i => tileIndexes[i]),\r\n      mapW,\r\n      mapH,\r\n      tileSize,\r\n      tileSize,\r\n      texture,\r\n    );\r\n\r\n\r\n    // Translate the one-dimensional level into path-finder 2d array\r\n    const grid = [];\r\n    for (let i = 0; i < level.length; i += mapW) {\r\n      grid.push(level.slice(i, i + mapW));\r\n    }\r\n\r\n    // Create a path finding thing\r\n    // eslint-disable-next-line new-cap\r\n    const path = new EasyStar.js();\r\n    path.setGrid(grid);\r\n    // Get the walkable tile indexes\r\n    const walkables = tileIndexes\r\n      .map(({ walkable }, i) => (walkable ? i : -1))\r\n      .filter(i => i !== -1);\r\n    path.setAcceptableTiles(walkables);\r\n\r\n    this.path = path;\r\n  }\r\n\r\n  findFreeSpot(isFree = true) {\r\n    const { mapW, mapH } = this;\r\n    let found = false;\r\n    let x;\r\n    let y;\r\n    while (!found) {\r\n      x = math.rand(mapW);\r\n      y = math.rand(mapH);\r\n      const { frame } = this.tileAtMapPos({ x, y });\r\n      if (!!frame.walkable === isFree) {\r\n        found = true;\r\n      }\r\n    }\r\n    return this.mapToPixelPos({ x, y });\r\n  }\r\n}\r\n","import { UpdateBehaviour, wallSlide } from '~gamelib';\r\nimport { Player } from './Player';\r\n\r\nexport class PlayerBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Player): void {\r\n    const {\r\n      pos, controls, speed, gameOver,\r\n    } = entity;\r\n\r\n    if (gameOver) {\r\n      entity.rotation += dt * 5;\r\n      entity.pivot.y = 16;\r\n      entity.pivot.x = 16;\r\n      return;\r\n    }\r\n\r\n    const { x, y } = controls;\r\n    const xo = x * dt * speed;\r\n    const yo = y * dt * speed;\r\n    const r = wallSlide(entity, entity.map, xo, yo);\r\n    if (r.x !== 0 && r.y !== 0) {\r\n      r.x /= Math.sqrt(2);\r\n      r.y /= Math.sqrt(2);\r\n    }\r\n    pos.x += r.x;\r\n    pos.y += r.y;\r\n\r\n    // Animate!\r\n    if (r.x || r.y) {\r\n      entity.frame.x = ((t / 0.08) | 0) % 4;\r\n      if (r.x < 0) {\r\n        entity.scale.x = -1;\r\n        entity.anchor.x = 48;\r\n      }\r\n      if (r.x > 0) {\r\n        entity.scale.x = 1;\r\n        entity.anchor.x = 0;\r\n      }\r\n    } else {\r\n      entity.frame.x = ((t / 0.2) | 0) % 2 + 4;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  TileSprite, Texture, KeyControls,\r\n} from '~gamelib';\r\n\r\nimport tiles from '../res/images/bravedigger-tiles.png';\r\nimport { PlayerBehaviour } from './PlayerBehaviour';\r\nimport { Level } from '../Level';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nexport class Player extends TileSprite {\r\n  controls: KeyControls;\r\n  speed: number;\r\n  map: Level;\r\n  gameOver: boolean;\r\n\r\n  constructor(controls: KeyControls, map: Level) {\r\n    super(texture, 48, 48);\r\n    this.controls = controls;\r\n    this.speed = 210;\r\n    this.anchor = { x: 0, y: 0 };\r\n    this.map = map;\r\n    this.hitBox = {\r\n      x: 8,\r\n      y: 10,\r\n      w: 28,\r\n      h: 38,\r\n    };\r\n    this.gameOver = false;\r\n\r\n    this.updateBehaviour = new PlayerBehaviour();\r\n  }\r\n}\r\n","import { TileSprite, Texture } from '~gamelib';\r\n\r\nimport tiles from '../res/images/bravedigger-tiles.png';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nexport class Pickup extends TileSprite {\r\n  constructor() {\r\n    super(texture, 48, 48);\r\n    this.hitBox = {\r\n      x: 2,\r\n      y: 22,\r\n      w: 44,\r\n      h: 26,\r\n    };\r\n    this.frame.x = 5;\r\n    this.frame.y = 2;\r\n  }\r\n}\r\n","import { UpdateBehaviour, entity, math } from '~gamelib';\r\n\r\nimport { Bat, BatStates } from './Bat';\r\n\r\nexport class BatBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, bat: Bat): void {\r\n    const {\r\n      pos, frame, speed, target, waypoint, state,\r\n    } = bat;\r\n\r\n    const angle = entity.angle(target, bat);\r\n    const distance = entity.distance(target, bat);\r\n    let xo = 0;\r\n    let yo = 0;\r\n    let waypointAngle;\r\n    let waypointDistance;\r\n\r\n    switch (state.get()) {\r\n      case BatStates.ATTACK:\r\n        xo = Math.cos(angle) * speed * dt;\r\n        yo = Math.sin(angle) * speed * dt;\r\n        if (distance < 60) {\r\n          state.set(BatStates.EVADE);\r\n        }\r\n        break;\r\n      case BatStates.EVADE:\r\n        xo = -Math.cos(angle) * speed * dt;\r\n        yo = -Math.sin(angle) * speed * dt;\r\n        if (distance > 120) {\r\n          if (math.randOneIn(2)) {\r\n            state.set(BatStates.WANDER);\r\n            bat.waypoint = {\r\n              x: pos.x + math.rand(-200, 200),\r\n              y: pos.y + math.rand(-200, 200),\r\n            };\r\n          } else {\r\n            state.set(BatStates.ATTACK);\r\n          }\r\n        }\r\n        break;\r\n      case BatStates.WANDER:\r\n        waypointAngle = math.angle(waypoint, pos);\r\n        waypointDistance = math.distance(pos, waypoint);\r\n\r\n        xo = Math.cos(waypointAngle) * speed * dt;\r\n        yo = Math.sin(waypointAngle) * speed * dt;\r\n        if (waypointDistance < 60) {\r\n          state.set(BatStates.EVADE);\r\n        }\r\n        break;\r\n    }\r\n    pos.x += xo;\r\n    pos.y += yo;\r\n\r\n    frame.x = ((t / 0.1) | 0) % 2 + 3;\r\n    state.update(dt);\r\n  }\r\n}\r\n","import {\r\n  TileSprite, Texture, Coordinates, math,\r\n} from '~gamelib';\r\n\r\nimport tiles from '../res/images/bravedigger-tiles.png';\r\nimport { BatBehaviour } from './BatBehaviour';\r\nimport { State } from '~gamelib/State';\r\nimport { Player } from './Player';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nexport enum BatStates {\r\n  ATTACK,\r\n  EVADE,\r\n  WANDER\r\n}\r\n\r\nexport class Bat extends TileSprite {\r\n  waypoint: Coordinates;\r\n  speed: number;\r\n  dir: { x: number; y: number; };\r\n  state: State<BatStates>;\r\n  target: Player;\r\n\r\n  constructor(target: Player) {\r\n    super(texture, 48, 48);\r\n    this.hitBox = {\r\n      x: 6,\r\n      y: 6,\r\n      w: 30,\r\n      h: 26,\r\n    };\r\n    this.frame.x = 3;\r\n    this.frame.y = 1;\r\n    this.dir = {\r\n      x: -1,\r\n      y: 0,\r\n    };\r\n    this.speed = math.rand(180, 300);\r\n    this.target = target;\r\n    this.waypoint = null;\r\n\r\n    this.state = new State(BatStates.ATTACK);\r\n    this.updateBehaviour = new BatBehaviour();\r\n  }\r\n}\r\n","import { UpdateBehaviour } from '~gamelib';\r\nimport { Bullet } from './Bullet';\r\n\r\n\r\nexport class BulletBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Bullet): void {\r\n    const { pos, speed, dir } = entity;\r\n\r\n    // Move in the direction of the path\r\n    pos.x += speed * dt * dir.x;\r\n    pos.y += speed * dt * dir.y;\r\n\r\n    if ((entity.life -= dt) < 0) {\r\n      entity.dead = true;\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Texture, TileSprite, math, Coordinates,\r\n} from '~gamelib';\r\n\r\nimport tiles from '../res/images/bravedigger-tiles.png';\r\nimport { BulletBehaviour } from './BulletBehaviour';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nexport class Bullet extends TileSprite {\r\n  speed: number;\r\n  dir: Coordinates;\r\n  life: number;\r\n\r\n  constructor(dir: Coordinates, speed = 100) {\r\n    super(texture, 48, 48);\r\n    this.hitBox = {\r\n      x: 24,\r\n      y: 12,\r\n      w: 24,\r\n      h: 26,\r\n    };\r\n    this.frame.x = 4;\r\n    this.frame.y = 2;\r\n    this.pivot.x = 24;\r\n    this.pivot.y = 24;\r\n    this.speed = speed;\r\n    this.dir = dir;\r\n    this.life = 3;\r\n    this.rotation = math.angle(dir, { x: 0, y: 0 });\r\n    this.updateBehaviour = new BulletBehaviour();\r\n  }\r\n}\r\n","import { UpdateBehaviour, math } from '~gamelib';\r\nimport { Totem } from './Totem';\r\n\r\n\r\nexport class TotemBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Totem): void {\r\n    if (math.randOneIn(250)) {\r\n      entity.fireIn = 1;\r\n    }\r\n    if (entity.fireIn > 0) {\r\n      entity.fireIn -= dt;\r\n      // Telegraph to the player\r\n      entity.frame.x = [1, 0][((t / 0.1) | 0) % 2];\r\n      if (entity.fireIn < 0) {\r\n        entity.fireAtTarget();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  TileSprite, Texture, entity, math,\r\n} from '~gamelib';\r\n\r\nimport tiles from '../res/images/bravedigger-tiles.png';\r\nimport { Player } from './Player';\r\nimport { Bullet } from './Bullet';\r\nimport { TotemBehaviour } from './TotamBehaviour';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nexport class Totem extends TileSprite {\r\n  target: Player;\r\n  onFire: (b: Bullet) => void;\r\n  fireIn: number;\r\n  baddieType: string;\r\n\r\n  constructor(target: Player, onFire: (b: Bullet) => void) {\r\n    super(texture, 48, 48);\r\n    this.baddieType = 'Totem';\r\n    this.frame.x = 2;\r\n    this.frame.y = 1;\r\n    this.target = target;\r\n    this.onFire = onFire;\r\n    this.fireIn = 0;\r\n\r\n    this.updateBehaviour = new TotemBehaviour();\r\n  }\r\n\r\n  fireAtTarget() {\r\n    const { target, onFire } = this;\r\n    const totemPos = entity.center(this);\r\n    const targetPos = entity.center(target);\r\n    const angle = math.angle(targetPos, totemPos);\r\n\r\n    const x = Math.cos(angle);\r\n    const y = Math.sin(angle);\r\n\r\n    const bullet = new Bullet({ x, y }, 300);\r\n    bullet.pos.x = totemPos.x - bullet.w / 2;\r\n    bullet.pos.y = totemPos.y - bullet.h / 2;\r\n\r\n    onFire(bullet);\r\n  }\r\n}\r\n","import {\r\n  TileSprite, Texture, entity, UpdateBehaviour,\r\n} from '~gamelib';\r\n\r\nimport tiles from '../res/images/bravedigger-tiles.png';\r\nimport { Player } from './Player';\r\nimport { Level } from '../Level';\r\nimport { Entity } from '~gamelib/entities/Entity';\r\n\r\nconst texture = new Texture(tiles);\r\n\r\nexport class Ghost extends TileSprite {\r\n  speed: number;\r\n  target: Player;\r\n  waypoint: any;\r\n  map: Level;\r\n  path: any;\r\n\r\n  constructor(target: Player, map: Level) {\r\n    super(texture, 48, 48);\r\n    this.hitBox = {\r\n      x: 6,\r\n      y: 3,\r\n      w: 32,\r\n      h: 32,\r\n    };\r\n    this.frame.x = 5;\r\n    this.frame.y = 1;\r\n    this.speed = 100;\r\n    this.target = target;\r\n    this.waypoint = null;\r\n    this.map = map;\r\n\r\n    this.updateBehaviour = new GhostBehaviour();\r\n  }\r\n\r\n  findPath() {\r\n    // Calculate the path-finding path\r\n    const { map, target } = this;\r\n    const s = map.pixelToMapPos(entity.center(this));\r\n    const d = map.pixelToMapPos(entity.center(target));\r\n    const start = performance.now();\r\n    const s2 = Date.now();\r\n    map.path.findPath(s.x, s.y, d.x, d.y, path => {\r\n      this.path = path || [];\r\n      const end = performance.now();\r\n      console.log(`Pathfinding took ${end - start} ms`, Date.now() - s2);\r\n    });\r\n    map.path.calculate();\r\n  }\r\n}\r\n\r\nclass GhostBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Ghost): void {\r\n    const { pos } = entity;\r\n    this.followPath(dt, entity);\r\n    // Bob spookily\r\n    pos.y += Math.sin(t / 0.1) * 0.5;\r\n  }\r\n\r\n  followPath(dt: number, entity: Ghost) {\r\n    const {\r\n      map, speed, path, pos, hitBox,\r\n    } = entity;\r\n    // Move along the path\r\n    if (!path.length) {\r\n      return;\r\n    }\r\n\r\n    const cell = entity.path[0];\r\n    // Move in the direction of the path\r\n    const xo = cell.x * map.tileW - (pos.x - hitBox.x);\r\n    const yo = cell.y * map.tileH - (pos.y - hitBox.y);\r\n\r\n    const closeX = Math.abs(xo) <= 2;\r\n    const closeY = Math.abs(yo) <= 2;\r\n    if (!closeX) pos.x += Math.sign(xo) * speed * dt;\r\n    if (!closeY) pos.y += Math.sign(yo) * speed * dt;\r\n\r\n    // If you made it, move to the next path element\r\n    if (closeX && closeY) {\r\n      entity.path = path.slice(1);\r\n      if (entity.path.length === 0) {\r\n        entity.findPath();\r\n      }\r\n    }\r\n  }\r\n}\r\n","import {\r\n  Container, Game, KeyControls, UpdateBehaviour, ContainerUpdateBehaviour, entity, math, State, Text,\r\n} from '~gamelib';\r\n\r\nimport { Level } from './Level';\r\nimport { Player } from './entities/Player';\r\nimport { Pickup } from './entities/Pickup';\r\nimport { Bat } from './entities/Bat';\r\nimport { Totem } from './entities/Totem';\r\nimport { Ghost } from './entities/Ghost';\r\n\r\nenum GameState {\r\n  READY,\r\n  PLAYING,\r\n  GAMEOVER\r\n}\r\n\r\nexport class GameScreen extends Container {\r\n  gameMap: Level;\r\n  player: Player;\r\n  pickups: Container;\r\n  baddies: Container;\r\n  controls: KeyControls;\r\n  onGameOver: () => void;\r\n  state: State<GameState>;\r\n  score: number;\r\n  scoreText: Text;\r\n  ghost: Ghost;\r\n\r\n  constructor(game: Game, controls: KeyControls, onGameOver: () => void) {\r\n    super();\r\n    this.w = game.w;\r\n    this.h = game.h;\r\n    this.controls = controls;\r\n    this.onGameOver = onGameOver;\r\n    const map = new Level(game.w, game.h);\r\n    const player = new Player(controls, map);\r\n    player.pos = map.findFreeSpot();\r\n    player.pos.y -= 1;\r\n\r\n    this.state = new State(GameState.READY);\r\n\r\n    this.gameMap = this.add(map);\r\n    this.pickups = this.add(new Container());\r\n    this.player = this.add(player);\r\n\r\n    const baddies = this.add(new Container());\r\n    for (let i = 0; i < 5; i++) {\r\n      this.randoBat(baddies.add(new Bat(player)));\r\n    }\r\n    this.baddies = baddies;\r\n\r\n    // Add a couple of Top-Hat Totems\r\n    for (let i = 0; i < 2; i++) {\r\n      const t = this.add(new Totem(player, b => baddies.add(b)));\r\n      const { x, y } = map.findFreeSpot(false); // `false` means \"NOT free\"\r\n      t.pos.x = x;\r\n      t.pos.y = y;\r\n    }\r\n\r\n    const ghost = this.add(new Ghost(player, map));\r\n    ghost.pos.x = 100;\r\n    ghost.pos.y = 100;\r\n    ghost.findPath();\r\n    this.ghost = ghost;\r\n\r\n\r\n    this.updateBehaviour = new GameBehaviour();\r\n\r\n    this.populate();\r\n    this.score = 0;\r\n    this.scoreText = this.add(\r\n      new Text('0', {\r\n        font: \"40pt 'Luckiest Guy', san-serif\",\r\n        fill: '#fff',\r\n        align: 'center',\r\n      }),\r\n    );\r\n    this.scoreText.pos = { x: game.w / 2, y: game.h / 2 - 40 };\r\n  }\r\n\r\n  populate() {\r\n    const { pickups, gameMap } = this;\r\n    for (let i = 0; i < 5; i++) {\r\n      const p = pickups.add(new Pickup());\r\n      p.pos = gameMap.findFreeSpot();\r\n    }\r\n  }\r\n\r\n  randoBat(bat: Bat) {\r\n    bat.pos.x = this.w * math.randf(1, 2);\r\n    bat.pos.y = math.rand(10) * 32;\r\n    bat.speed = math.rand(150, 230);\r\n    return bat;\r\n  }\r\n}\r\n\r\nclass GameBehaviour extends ContainerUpdateBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, game: GameScreen): void {\r\n    const {\r\n      controls, baddies, player, pickups, state,\r\n    } = game;\r\n\r\n    switch (state.get()) {\r\n      case GameState.READY:\r\n        if (state.first) {\r\n          game.scoreText.text = 'GET READY';\r\n        }\r\n        if (state.time > 2) {\r\n          game.scoreText.text = '0';\r\n          state.set(GameState.PLAYING);\r\n        }\r\n        break;\r\n\r\n      case GameState.PLAYING:\r\n        super.update(dt, t, game);\r\n        this.updatePlaying(game);\r\n        break;\r\n\r\n      case GameState.GAMEOVER:\r\n        if (state.first) {\r\n          player.gameOver = true;\r\n          game.scoreText.text = `DEAD. Score: ${game.score}`;\r\n        }\r\n        super.update(dt, t, game);\r\n\r\n        // If player dead, wait for space bar\r\n        if (player.gameOver && controls.action) {\r\n          game.onGameOver();\r\n        }\r\n        break;\r\n    }\r\n\r\n    state.update(dt);\r\n  }\r\n\r\n  updatePlaying(game: GameScreen) {\r\n    const { baddies, player, pickups, state, ghost } = game;\r\n\r\n    baddies.map(baddie => {\r\n      if (entity.hit(player, baddie)) {\r\n        state.set(GameState.GAMEOVER);\r\n        baddie.dead = true;\r\n      }\r\n    });\r\n\r\n    if (entity.hit(player, ghost)) {\r\n      player.gameOver = true;\r\n      state.set(GameState.GAMEOVER);\r\n    }\r\n\r\n    // Collect pickup!\r\n    entity.hits(player, pickups, p => {\r\n      p.dead = true;\r\n      game.score++;\r\n      if (pickups.children.length === 1) {\r\n        game.populate();\r\n        game.score += 5;\r\n      }\r\n      game.scoreText.text = game.score.toString();\r\n    });\r\n  }\r\n}\r\n}\r\n","import { Game, KeyControls } from '~gamelib';\r\nimport { GameScreen } from './GameScreen';\r\n\r\nconst game = new Game(48 * 19, 48 * 11);\r\nconst keys = new KeyControls();\r\n\r\nconst startGame = () => {\r\n  game.scene = new GameScreen(game, keys, startGame);\r\n};\r\n\r\nstartGame();\r\ngame.run();\r\n"]}