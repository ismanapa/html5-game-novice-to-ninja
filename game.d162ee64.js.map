{"version":3,"sources":["gamelib/utils/Vec.ts","gamelib/entities/Entity.ts","gamelib/behaviours/ContainerUpdateBehaviour.ts","gamelib/entities/EntityTypeEnum.ts","gamelib/entities/Container.ts","gamelib/renderer/EntityRenderes/EntityCanvasRenderer.ts","gamelib/renderer/EntityRenderes/TextCanvasRenderer.ts","gamelib/renderer/EntityRenderes/SpriteCanvasRenderer.ts","gamelib/renderer/EntityRenderes/TileSpriteCanvasRenderer.ts","gamelib/renderer/EntityRenderes/RectCanvasRenderer.ts","gamelib/renderer/EntityRenderes/ContainerRenderer.ts","gamelib/renderer/EntityRenderes/index.ts","gamelib/renderer/CanvasRenderer.ts","gamelib/Assets.ts","gamelib/entities/Texture.ts","gamelib/entities/Sprite.ts","gamelib/entities/Text.ts","gamelib/entities/Rect.ts","gamelib/controls/KeyControls.ts","gamelib/controls/MouseControls.ts","gamelib/game.ts","gamelib/utils/math.ts","gamelib/utils/entity.ts","gamelib/behaviours/AnimManagerBehaviour.ts","gamelib/behaviours/AnimBehaviour.ts","gamelib/AnimManager.ts","gamelib/entities/TileSprite.ts","gamelib/entities/TileMap.ts","gamelib/behaviours/CameraBehaviour.ts","gamelib/entities/Camera.ts","gamelib/movement/deadInTracks.ts","gamelib/movement/wallSlide.ts","gamelib/State.ts","gamelib/utils/physics.ts","gamelib/sounds/Sound.ts","gamelib/sounds/SoundPool.ts","gamelib/sounds/SoungGroup.ts","gamelib/index.ts","chapter06-6/entities/CrashTestDummy.ts","chapter06-6/GameScreen.ts","chapter06-6/game.ts"],"names":[],"mappings":"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","file":"game.d162ee64.js","sourceRoot":"../../src","sourcesContent":["\r\nexport class Vec {\r\n  x: number;\r\n  y: number;\r\n\r\n  static from(v: Vec) {\r\n    return new Vec().copy(v);\r\n  }\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  mag(): number {\r\n    const { x, y } = this;\r\n    return Math.sqrt(x * x + y * y);\r\n  }\r\n\r\n  set(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  copy({ x, y }: Vec) {\r\n    this.x = x;\r\n    this.y = y;\r\n    return this;\r\n  }\r\n\r\n  add({ x, y }: Vec) {\r\n    this.x += x;\r\n    this.y += y;\r\n    return this;\r\n  }\r\n\r\n  subtract({ x, y }: Vec) {\r\n    this.x -= x;\r\n    this.y -= y;\r\n    return this;\r\n  }\r\n\r\n  multiply(s: number) {\r\n    this.x *= s;\r\n    this.y *= s;\r\n    return this;\r\n  }\r\n\r\n  divide(s: number) {\r\n    this.x /= s;\r\n    this.y /= s;\r\n    return this;\r\n  }\r\n\r\n  clone() {\r\n    return Vec.from(this);\r\n  }\r\n\r\n  normalize() {\r\n    const mag = this.mag();\r\n    if (mag > 0) {\r\n      this.x /= mag;\r\n      this.y /= mag;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  dot({ x, y }: Vec) {\r\n    return this.x * x + this.y * y;\r\n  }\r\n}\r\n","import { Coordinates, HitBox } from '~gamelib/types';\nimport { UpdateBehaviour } from '~gamelib/behaviours/UpdateBehaviour';\nimport { EntityType } from './EntityTypeEnum';\nimport { Vec } from '../utils/Vec';\n\nexport abstract class Entity {\n  pos: Vec;\n  label: string;\n  updateBehaviour: UpdateBehaviour;\n  visible: boolean;\n  type: EntityType;\n  dead: boolean;\n  w: number;\n  h: number;\n  hitBox: HitBox;\n  rotation: number;\n  pivot: Coordinates | Vec;\n  anchor: Coordinates;\n  scale: Coordinates;\n  acc: Vec;\n  mass: number;\n  vel: Vec;\n\n  constructor() {\n    this.pos = new Vec();\n    this.visible = true;\n  }\n\n  update(dt: number, t: number) {\n    if (this.updateBehaviour) {\n      this.updateBehaviour.update(dt, t, this);\n    }\n  }\n\n  setPos(pos: Vec) {\n    this.pos = pos;\n  }\n\n  setIsDead(isDead: boolean) {\n    this.dead = isDead;\n  }\n}\n","import { UpdateBehaviour } from '~gamelib/behaviours/UpdateBehaviour';\nimport { Container } from '~gamelib/entities/Container';\n\nexport class ContainerUpdateBehaviour implements UpdateBehaviour {\n  update(dt: number, t: number, entity: Container): void {\n    const children = entity.children.filter(child => {\n      if (child.updateBehaviour || child.update) {\n        child.update(dt, t);\n      }\n      return !child.dead;\n    });\n\n    entity.setChildren(children);\n  }\n}\n","export enum EntityType {\n  Text,\n  Sprite,\n  Texture,\n  Container,\n  TileSprite,\n  Rect,\n}\n","import { Entity } from '~gamelib/entities/Entity';\nimport { ContainerUpdateBehaviour } from '~gamelib/behaviours/ContainerUpdateBehaviour';\nimport { EntityType } from './EntityTypeEnum';\nimport { Coordinates } from '~gamelib/types';\n\nexport class Container extends Entity {\n  children: Entity[];\n  path: Coordinates[];\n  style: { [key: string]: any };\n\n  constructor() {\n    super();\n    this.children = [];\n    this.type = EntityType.Container;\n    this.updateBehaviour = new ContainerUpdateBehaviour();\n  }\n\n  add<T extends Entity>(child: T): T {\n    this.children.push(child);\n    return child;\n  }\n\n  remove(child: Entity) {\n    this.children = this.children.filter(c => c !== child);\n    return child;\n  }\n\n  setChildren(children: Entity[]) {\n    this.children = children;\n  }\n\n  map(f: (entity: Entity) => void) {\n    return this.children.map(f);\n  }\n}\n","import { Entity } from '~gamelib/entities/Entity';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport abstract class EntityCanvasRenderer {\r\n  entityName: EntityType;\r\n  abstract render(ctx: CanvasRenderingContext2D, entity: Entity): void;\r\n}\r\n","import { Text } from '~gamelib/entities/Text';\r\nimport { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport class TextCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.Text;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: Text) {\r\n    const { font, fill, align } = entity.style;\r\n    if (font) ctx.font = font;\r\n    if (fill) ctx.fillStyle = fill;\r\n    if (align) ctx.textAlign = align;\r\n    ctx.fillText(entity.text, 0, 0);\r\n  }\r\n}\r\n","import { Sprite } from '~gamelib/entities/Sprite';\r\nimport { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport class SpriteCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.Sprite;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: Sprite) {\r\n    if (entity.anchor) ctx.translate(entity.anchor.x, entity.anchor.y);\r\n    if (entity.scale) ctx.scale(entity.scale.x, entity.scale.y);\r\n    if (entity.rotation) {\r\n      const px = entity.pivot ? entity.pivot.x : 0;\r\n      const py = entity.pivot ? entity.pivot.y : 0;\r\n      ctx.translate(px, py);\r\n      ctx.rotate(entity.rotation);\r\n      ctx.translate(-px, -py);\r\n    }\r\n    ctx.drawImage(entity.texture.img, 0, 0);\r\n  }\r\n}\r\n","import { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\nimport { TileSprite } from '~gamelib/entities/TileSprite';\r\n\r\nexport class TileSpriteCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.TileSprite;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: TileSprite) {\r\n    const { img } = entity.texture;\r\n    ctx.drawImage(\r\n      img,\r\n      entity.frame.x * entity.tileW, // source x\r\n      entity.frame.y * entity.tileH, // source y\r\n      entity.tileW, entity.tileH, // width & height\r\n      0, 0, // destination x & y\r\n      entity.tileW, entity.tileH, // destination width & height\r\n    );\r\n  }\r\n}\r\n","import { EntityCanvasRenderer } from './EntityCanvasRenderer';\r\nimport { Rect } from '~gamelib/entities/Rect';\r\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\r\n\r\nexport class RectCanvasRenderer extends EntityCanvasRenderer {\r\n  constructor() {\r\n    super();\r\n    this.entityName = EntityType.Rect;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D, entity: Rect): void {\r\n    ctx.fillStyle = entity.style.fill;\r\n    ctx.fillRect(0, 0, entity.w, entity.h);\r\n  }\r\n}\r\n","import { EntityCanvasRenderer } from './EntityCanvasRenderer';\nimport { EntityType } from '~gamelib/entities/EntityTypeEnum';\nimport { Container } from '~gamelib/entities/Container';\n\nexport class ContainerRenderer extends EntityCanvasRenderer {\n  constructor() {\n    super();\n    this.entityName = EntityType.Container;\n  }\n\n  render(ctx: CanvasRenderingContext2D, entity: Container): void {\n    if (entity.path) {\n      const [head, ...tail] = entity.path;\n      if (entity.path.length > 1) {\n        ctx.fillStyle = entity.style.fill || '#fff';\n        ctx.beginPath();\n        ctx.moveTo(head.x, head.y);\n        tail.forEach(({ x, y }) => ctx.lineTo(x, y));\n        ctx.closePath();\n        ctx.fill();\n      }\n    }\n  }\n}\n","export * from './EntityCanvasRenderer';\r\nexport * from './TextCanvasRenderer';\r\nexport * from './SpriteCanvasRenderer';\r\nexport * from './TileSpriteCanvasRenderer';\r\nexport * from './RectCanvasRenderer';\r\nexport * from './ContainerRenderer';\r\n","import { Container } from '~gamelib/entities/Container';\r\nimport {\r\n  TextCanvasRenderer,\r\n  SpriteCanvasRenderer,\r\n  EntityCanvasRenderer,\r\n  TileSpriteCanvasRenderer,\r\n  RectCanvasRenderer,\r\n  ContainerRenderer,\r\n} from './EntityRenderes';\r\n\r\nexport class CanvasRenderer {\r\n  w: number;\r\n  h: number;\r\n  view: HTMLCanvasElement;\r\n  ctx: CanvasRenderingContext2D;\r\n  renderes: EntityCanvasRenderer[];\r\n\r\n  constructor(w: number, h: number) {\r\n    const canvas = document.createElement('canvas');\r\n    canvas.width = w;\r\n    canvas.height = h;\r\n    this.w = w;\r\n    this.h = h;\r\n    this.view = canvas;\r\n    this.ctx = canvas.getContext('2d');\r\n    this.ctx.imageSmoothingEnabled = false;\r\n    this.ctx.textBaseline = 'top';\r\n\r\n    this.renderes = [\r\n      new TextCanvasRenderer(),\r\n      new SpriteCanvasRenderer(),\r\n      new TileSpriteCanvasRenderer(),\r\n      new RectCanvasRenderer(),\r\n      new ContainerRenderer(),\r\n    ];\r\n  }\r\n\r\n  render(container: Container, clear = true) {\r\n    if (container.visible === false) {\r\n      return;\r\n    }\r\n    const { ctx, renderes } = this;\r\n\r\n    function renderRec(cont: Container) {\r\n      // Render the container children\r\n      cont.children.forEach(child => {\r\n        if (child.visible === false) {\r\n          return;\r\n        }\r\n        ctx.save();\r\n\r\n        // Handle transforms\r\n        if (child.pos) {\r\n          ctx.translate(Math.round(child.pos.x), Math.round(child.pos.y));\r\n        }\r\n        if (child.anchor) ctx.translate(child.anchor.x, child.anchor.y);\r\n        if (child.scale) ctx.scale(child.scale.x, child.scale.y);\r\n        if (child.rotation) {\r\n          const px = child.pivot ? child.pivot.x : 0;\r\n          const py = child.pivot ? child.pivot.y : 0;\r\n          ctx.translate(px, py);\r\n          ctx.rotate(child.rotation);\r\n          ctx.translate(-px, -py);\r\n        }\r\n\r\n        const renderer = renderes.find(r => r.entityName === child.type);\r\n        if (renderer) {\r\n          renderer.render(ctx, child);\r\n        }\r\n\r\n        // Render any child sub-nodes\r\n        if (child instanceof Container) {\r\n          renderRec(child);\r\n        }\r\n        ctx.restore();\r\n      });\r\n    }\r\n\r\n    if (clear) {\r\n      ctx.clearRect(0, 0, this.w, this.h);\r\n    }\r\n\r\n    renderRec(container);\r\n  }\r\n}\r\n","const cache: { [key: string]: any } = {};\nconst readyListeners: any[] = [];\nconst progressListeners: any[] = [];\n\nlet completed = false;\nlet remaining = 0;\nlet total = 0;\n\nfunction done() {\n  completed = true;\n  readyListeners.forEach(cb => cb());\n}\n\n// Called when a queued asset is ready to use\nfunction onAssetLoad(e: any) {\n  if (completed) {\n    console.warn('Warning: asset defined after preload.', e.target);\n    return;\n  }\n\n  remaining--;\n  progressListeners.forEach(cb => cb(total - remaining, total));\n  if (remaining === 0) {\n    // We're done loading\n    done();\n  }\n}\n\n// Helper function for queuing assets\nfunction load(url: string, maker: (url: string, onLoad: (e: any) => void) => void) {\n  let cacheKey = url;\n  while (cacheKey.startsWith('../')) {\n    cacheKey = url.slice(3);\n  }\n  if (cache[cacheKey]) {\n    return cache[cacheKey];\n  }\n  const asset = maker(url, onAssetLoad);\n  remaining++;\n  total++;\n\n  cache[cacheKey] = asset;\n  return asset;\n}\n\nexport const Assets = {\n  get completed() {\n    return completed;\n  },\n\n  onReady(cb: () => void) {\n    if (completed) {\n      return cb();\n    }\n\n    readyListeners.push(cb);\n    // No assets to load\n    if (remaining === 0) {\n      done();\n    }\n  },\n\n  onProgress(cb: () => void) {\n    progressListeners.push(cb);\n  },\n\n  image(url: string) {\n    return load(url, (url: string, onAssetLoad: (e: any) => void) => {\n      const img = new Image();\n      img.src = url;\n      img.addEventListener('load', onAssetLoad, false);\n      return img;\n    });\n  },\n\n  sound(url: string) {\n    return load(url, (url: string, onAssetLoad: (e: any) => void) => {\n      const audio = new Audio();\n      audio.src = url;\n      const onLoad = e => {\n        audio.removeEventListener('canplay', onLoad);\n        onAssetLoad(e);\n      };\n      audio.addEventListener('canplay', onLoad, false);\n      return audio;\n    }).cloneNode();\n  },\n};\n","import { Entity } from '~gamelib/entities/Entity';\nimport { Assets } from '~gamelib/Assets';\n\nexport class Texture extends Entity {\n  img: HTMLImageElement;\n\n  constructor(url: string) {\n    super();\n    this.img = Assets.image(url);\n  }\n}\n","import { Entity } from '~gamelib/entities/Entity';\nimport { Texture } from '~gamelib/entities/Texture';\nimport { EntityType } from './EntityTypeEnum';\n\nexport class Sprite extends Entity {\n  texture: Texture;\n  scale: { x: number; y: number };\n  anchor: { x: number; y: number };\n  pivot: { x: number; y: number };\n  rotation: number;\n\n  constructor(texture: Texture) {\n    super();\n    this.texture = texture;\n    this.type = EntityType.Sprite;\n    this.scale = { x: 1, y: 1 };\n    this.anchor = { x: 0, y: 0 };\n    this.pivot = { x: 0, y: 0 };\n    this.rotation = 0;\n  }\n}\n","import { Entity } from '~gamelib/entities/Entity';\nimport { EntityType } from './EntityTypeEnum';\n\nexport class Text extends Entity {\n  text: string;\n  style: { [key: string]: any };\n\n  constructor(text = '', style = {}) {\n    super();\n    this.type = EntityType.Text;\n    this.text = text;\n    this.style = style;\n  }\n}\n","import { Entity } from './Entity';\r\nimport { EntityType } from './EntityTypeEnum';\r\nimport { Vec } from '~gamelib/utils/Vec';\r\n\r\nexport class Rect extends Entity {\r\n  style: { [key: string]: string };\r\n\r\n  constructor(w: number, h: number, style = { fill: '#333' }) {\r\n    super();\r\n    this.type = EntityType.Rect;\r\n    this.pos = new Vec(0, 0);\r\n    this.w = w;\r\n    this.h = h;\r\n    this.style = style;\r\n  }\r\n}\r\n","\ntype KeysState = { [key: string]: boolean; };\n\nexport class KeyControls {\n  keys: KeysState;\n\n  constructor(enabled = true) {\n    this.keys = {};\n\n    if (enabled) {\n      // Bind event handlers\n      document.addEventListener('keydown', e => {\n        if ([37, 38, 39, 40, 32].indexOf(e.which) >= 0) {\n          e.preventDefault();\n        }\n        this.keys[e.which] = true;\n      }, false);\n\n      document.addEventListener('keyup', e => {\n        this.keys[e.which] = false;\n      }, false);\n    }\n  }\n\n  key(key: string, value: boolean) {\n    if (value !== undefined) {\n      this.keys[key] = value;\n    }\n    return this.keys[key];\n  }\n\n  reset() {\n    Object\n      .keys(this.keys)\n      .forEach(key => {\n        this.keys[key] = false;\n      });\n  }\n\n  // Handle key actions\n  get action() {\n    return this.keys[32];\n  }\n\n  get x() {\n    if (this.keys[37] || this.keys[65]) {\n      return -1;\n    }\n    if (this.keys[39] || this.keys[68]) {\n      return 1;\n    }\n    return 0;\n  }\n\n  get y() {\n    if (this.keys[38] || this.keys[87]) {\n      return -1;\n    }\n    if (this.keys[40] || this.keys[83]) {\n      return 1;\n    }\n    return 0;\n  }\n}\n","import { Coordinates } from '~gamelib/types';\n\nexport class MouseControls {\n  el: HTMLCanvasElement;\n  pos: Coordinates;\n  isDown: boolean;\n  pressed: boolean;\n  released: boolean;\n\n  constructor(container: HTMLCanvasElement) {\n    this.el = container;\n\n    this.pos = { x: 0, y: 0 };\n    this.isDown = false;\n    this.pressed = false;\n    this.released = false;\n\n    // Handlers\n    document.addEventListener('mousedown', e => this.down(e), false);\n    document.addEventListener('mouseup', () => this.up(), false);\n    document.addEventListener('mousemove', e => this.move(e), false);\n  }\n\n  mousePosFromEvent({ clientX, clientY }: MouseEvent) {\n    const { el, pos } = this;\n    const rect = el.getBoundingClientRect();\n    const xr = el.width / el.clientWidth;\n    const yr = el.height / el.clientHeight;\n    pos.x = (clientX - rect.left) * xr;\n    pos.y = (clientY - rect.top) * yr;\n  }\n\n  down(e: MouseEvent) {\n    this.isDown = true;\n    this.pressed = true;\n    this.mousePosFromEvent(e);\n  }\n\n  up() {\n    this.isDown = false;\n    this.released = true;\n  }\n\n  move(e: MouseEvent) {\n    this.mousePosFromEvent(e);\n  }\n\n  update() {\n    this.released = false;\n    this.pressed = false;\n  }\n}","import { Container } from './entities/Container';\r\nimport { CanvasRenderer } from './renderer/CanvasRenderer';\r\n\r\ntype GameUpdateFunc = (dt: number, t: number) => void;\r\nconst STEP = 1 / 60;\r\nconst MAX_FRAME = STEP * 5;\r\nconst MULTIPLIER = 1;\r\nconst SPEED = STEP * MULTIPLIER;\r\n\r\nexport class Game {\r\n  w: number;\r\n  h: number;\r\n  parent: string;\r\n  renderer: CanvasRenderer;\r\n  scene: Container;\r\n\r\n  constructor(w: number, h: number, parent: string = '#board') {\r\n    this.w = w;\r\n    this.h = h;\r\n    this.renderer = new CanvasRenderer(w, h);\r\n    document.querySelector(parent).appendChild(this.renderer.view);\r\n\r\n    this.scene = new Container();\r\n  }\r\n\r\n  run(gameUpdate: GameUpdateFunc = (): void => { }) {\r\n    let dt = 0;\r\n    let last = 0;\r\n    const loopy = (ms: number): void => {\r\n      requestAnimationFrame(loopy);\r\n\r\n      const t = ms / 1000; // Let's work in seconds\r\n      dt += Math.min(t - last, MAX_FRAME);\r\n      last = t;\r\n\r\n      while (dt >= SPEED) {\r\n        this.scene.update(STEP, t / MULTIPLIER);\r\n        gameUpdate(STEP, t / MULTIPLIER);\r\n        dt -= SPEED;\r\n      }\r\n      this.renderer.render(this.scene);\r\n    };\r\n\r\n    const init = (ms: number): void => {\r\n      last = ms / 1000;\r\n      requestAnimationFrame(loopy);\r\n    };\r\n\r\n    requestAnimationFrame(init);\r\n  }\r\n}\r\n","import { Coordinates } from '~gamelib/types';\r\n\r\nlet { random } = Math;\r\nconst randf = (min: number, max: number = null) => {\r\n  if (max == null) {\r\n    max = min || 1;\r\n    min = 0;\r\n  }\r\n  return random() * (max - min) + min;\r\n};\r\n\r\nconst rand = (min: number, max: number = null) => Math.floor(randf(min, max));\r\n\r\nconst randOneIn = (max: number = 2) => rand(0, max) === 0;\r\n\r\nconst randOneFrom = <T>(items: T[]): T => items[rand(items.length)];\r\n\r\nconst distance = (a: Coordinates, b: Coordinates): number => {\r\n  const dx = a.x - b.x;\r\n  const dy = a.y - b.y;\r\n  return Math.sqrt(dx * dx + dy * dy);\r\n};\r\n\r\nconst clamp = (x: number, min: number, max: number) => Math.max(min, Math.min(x, max));\r\n\r\nconst angle = (a: Coordinates, b: Coordinates) => {\r\n  const dx = a.x - b.x;\r\n  const dy = a.y - b.y;\r\n  const angle = Math.atan2(dy, dx);\r\n\r\n  return angle;\r\n};\r\n\r\n\r\nlet seed = 42;\r\nconst randomSeed = (s: number = NaN) => {\r\n  if (!isNaN(s)) {\r\n    seed = s;\r\n  }\r\n  return seed;\r\n};\r\n\r\nconst randomSeeded = () => {\r\n  // https://en.wikipedia.org/wiki/Linear_congruential_generator\r\n  seed = (seed * 16807 + 0) % 2147483647;\r\n  return seed / 2147483647;\r\n};\r\n\r\nconst useSeededRandom = (blnUse = true) => {\r\n  randomSeeded();\r\n  random = blnUse ? randomSeeded : Math.random;\r\n};\r\n\r\nexport const math = {\r\n  randf,\r\n  rand,\r\n  randOneFrom,\r\n  randOneIn,\r\n  distance,\r\n  clamp,\r\n  angle,\r\n  useSeededRandom,\r\n  randomSeed,\r\n  randomSeeded,\r\n};\r\n","import { Entity } from '../entities/Entity';\r\nimport { Container } from '../entities/Container';\r\nimport { Rect } from '../entities/Rect';\r\nimport { math } from './math';\r\nimport { HitBox } from '../types';\r\n\r\nconst center = (entity: Entity) => {\r\n  const { pos, w, h } = entity;\r\n  return {\r\n    x: pos.x + w / 2,\r\n    y: pos.y + h / 2,\r\n  };\r\n};\r\n\r\nconst distance = (a: Entity, b: Entity) => math.distance(center(a), center(b));\r\n\r\nconst addDebug = (e: Container) => {\r\n  e.children = e.children || [];\r\n  const bb = new Rect(e.w, e.h, { fill: 'rgba(255, 0, 0, 0.3)' });\r\n  e.children.push(bb);\r\n  if (e.hitBox) {\r\n    const {\r\n      x, y, w, h,\r\n    } = e.hitBox;\r\n    const hb = new Rect(w, h, { fill: 'rgba(255, 0, 0, 0.5)' });\r\n    hb.pos.x = x;\r\n    hb.pos.y = y;\r\n    e.children.push(hb);\r\n  }\r\n  return e;\r\n};\r\n\r\n\r\nconst bounds = (entity: Entity): HitBox => {\r\n  const {\r\n    w, h, pos, hitBox,\r\n  } = entity;\r\n  const hit = hitBox || {\r\n    x: 0, y: 0, w, h,\r\n  };\r\n  return {\r\n    x: hit.x + pos.x,\r\n    y: hit.y + pos.y,\r\n    w: hit.w - 1,\r\n    h: hit.h - 1,\r\n  };\r\n};\r\n\r\nconst hit = (e1: Entity, e2: Entity) => {\r\n  const a = bounds(e1);\r\n  const b = bounds(e2);\r\n  return a.x + a.w >= b.x\r\n    && a.x <= b.x + b.w\r\n    && a.y + a.h >= b.y\r\n    && a.y <= b.y + b.h;\r\n};\r\n\r\nconst hits = (entity: Entity, container: Container, hitCallback: (e: Entity) => void) => {\r\n  const a = bounds(entity);\r\n  container.map(e2 => {\r\n    const b = bounds(e2);\r\n    if (\r\n      a.x + a.w >= b.x\r\n      && a.x <= b.x + b.w\r\n      && a.y + a.h >= b.y\r\n      && a.y <= b.y + b.h\r\n    ) {\r\n      hitCallback(e2);\r\n    }\r\n  });\r\n};\r\n\r\nconst angle = (a: Entity, b: Entity) => math.angle(center(a), center(b));\r\n\r\nexport const entity = {\r\n  center,\r\n  distance,\r\n  bounds,\r\n  hit,\r\n  hits,\r\n  addDebug,\r\n  angle,\r\n};\r\n","import { UpdateBehaviour } from './UpdateBehaviour';\r\nimport { AnimManager } from '~gamelib/AnimManager';\r\n\r\nexport class AnimManagerBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: AnimManager): void {\r\n    const { current, anims, frameSource } = entity;\r\n    if (!current) {\r\n      return;\r\n    }\r\n    const anim = anims[current];\r\n    anim.update(dt);\r\n\r\n    // Sync the tileSprite frame\r\n    frameSource.x = anim.frame.x;\r\n    frameSource.y = anim.frame.y;\r\n  }\r\n}\r\n","import { UpdateBehaviour } from './UpdateBehaviour';\r\nimport { Anim } from '~gamelib/AnimManager';\r\n\r\nexport class AnimBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Anim): void {\r\n    const { rate, frames } = entity;\r\n    entity.curTime += dt;\r\n    if (entity.curTime > rate) {\r\n      entity.curFrame++;\r\n      entity.frame = frames[entity.curFrame % frames.length];\r\n      entity.curTime -= rate;\r\n    }\r\n  }\r\n}\r\n","import { Coordinates } from './types';\r\nimport { TileSprite } from './entities/TileSprite';\r\nimport { Entity } from './entities/Entity';\r\nimport { AnimManagerBehaviour } from './behaviours/AnimManagerBehaviour';\r\nimport { AnimBehaviour } from './behaviours/AnimBehaviour';\r\n\r\nexport class Anim extends Entity {\r\n  frames: Coordinates[];\r\n  rate: number;\r\n  frame: Coordinates;\r\n  curFrame: number;\r\n  curTime: number;\r\n\r\n  constructor(frames: Coordinates[], rate: number) {\r\n    super();\r\n    this.frames = frames;\r\n    this.rate = rate;\r\n    this.updateBehaviour = new AnimBehaviour();\r\n    this.reset();\r\n  }\r\n\r\n  reset() {\r\n    [this.frame] = this.frames;\r\n    this.curFrame = 0;\r\n    this.curTime = 0;\r\n  }\r\n}\r\n\r\nexport class AnimManager extends Entity {\r\n  anims: { [key: string]: Anim };\r\n  running: boolean;\r\n  frameSource: Coordinates;\r\n  current: string;\r\n\r\n  constructor(e: TileSprite) {\r\n    super();\r\n    this.anims = {};\r\n    this.running = false;\r\n    this.frameSource = e.frame;\r\n    this.current = null;\r\n\r\n    this.updateBehaviour = new AnimManagerBehaviour();\r\n  }\r\n\r\n  add(name: string, frames: Coordinates[], speed: number) {\r\n    this.anims[name] = new Anim(frames, speed);\r\n    return this.anims[name];\r\n  }\r\n\r\n  play(anim: string) {\r\n    const { current, anims } = this;\r\n    if (anim === current) {\r\n      return;\r\n    }\r\n    this.current = anim;\r\n    anims[anim].reset();\r\n  }\r\n\r\n  stop() {\r\n    this.current = null;\r\n  }\r\n}\r\n","import { Sprite } from './Sprite';\r\nimport { Texture } from './Texture';\r\nimport { Coordinates } from '~gamelib/types';\r\nimport { EntityType } from './EntityTypeEnum';\r\nimport { AnimManager } from '~gamelib/AnimManager';\r\n\r\nexport class TileSprite extends Sprite {\r\n  tileW: number;\r\n  tileH: number;\r\n  frame: Coordinates;\r\n  type: EntityType;\r\n  anims: AnimManager;\r\n\r\n  constructor(texture: Texture, w: number, h: number) {\r\n    super(texture);\r\n    this.type = EntityType.TileSprite;\r\n    this.tileW = w;\r\n    this.tileH = h;\r\n    this.frame = { x: 0, y: 0 };\r\n    this.anims = new AnimManager(this);\r\n  }\r\n\r\n  setFrame(frame: Coordinates) {\r\n    this.frame = frame;\r\n  }\r\n\r\n  get w() {\r\n    return this.tileW * Math.abs(this.scale.x);\r\n  }\r\n\r\n  get h() {\r\n    return this.tileH * Math.abs(this.scale.y);\r\n  }\r\n}\r\n","import { Container } from './Container';\r\nimport { Coordinates, HitBox } from '../types';\r\nimport { TileSprite } from './TileSprite';\r\nimport { Texture } from './Texture';\r\n\r\nexport class TileMap extends Container {\r\n  mapW: number;\r\n  mapH: number;\r\n  tileW: number;\r\n  tileH: number;\r\n  w: number;\r\n  h: number;\r\n  children: TileSprite[];\r\n\r\n  constructor(\r\n    tiles: Coordinates[],\r\n    mapW: number,\r\n    mapH: number,\r\n    tileW: number,\r\n    tileH: number,\r\n    texture: Texture,\r\n  ) {\r\n    super();\r\n\r\n    this.mapW = mapW;\r\n    this.mapH = mapH;\r\n    this.tileW = tileW;\r\n    this.tileH = tileH;\r\n    this.w = mapW * tileW;\r\n    this.h = mapH * tileH;\r\n\r\n    // Add all tile sprites\r\n    this.children = tiles.map((frame: Coordinates, i: number) => {\r\n      const s = new TileSprite(texture, tileW, tileH);\r\n      s.frame = frame;\r\n      s.pos.x = i % mapW * tileW;\r\n      s.pos.y = Math.floor(i / mapW) * tileH;\r\n      return s;\r\n    });\r\n  }\r\n\r\n\r\n  pixelToMapPos(pos: Coordinates) {\r\n    const { tileW, tileH } = this;\r\n    return {\r\n      x: Math.floor(pos.x / tileW),\r\n      y: Math.floor(pos.y / tileH),\r\n    };\r\n  }\r\n\r\n  mapToPixelPos(mapPos: Coordinates) {\r\n    const { tileW, tileH } = this;\r\n    return {\r\n      x: mapPos.x * tileW,\r\n      y: mapPos.y * tileH,\r\n    };\r\n  }\r\n\r\n  tileAtMapPos(mapPos: Coordinates) {\r\n    return this.children[mapPos.y * this.mapW + mapPos.x];\r\n  }\r\n\r\n  tileAtPixelPos(pos: Coordinates) {\r\n    return this.tileAtMapPos(this.pixelToMapPos(pos));\r\n  }\r\n\r\n  setFrameAtMapPos(mapPos: Coordinates, frame: Coordinates) {\r\n    const tile = this.tileAtMapPos(mapPos);\r\n    tile.frame = frame;\r\n    return tile;\r\n  }\r\n\r\n  setFrameAtPixelPos(pos: Coordinates, frame: Coordinates) {\r\n    return this.setFrameAtMapPos(this.pixelToMapPos(pos), frame);\r\n  }\r\n\r\n  tilesAtCorners(bounds: HitBox, xo = 0, yo = 0) {\r\n    return [\r\n      [bounds.x, bounds.y], // Top-left\r\n      [bounds.x + bounds.w, bounds.y], // Top-right\r\n      [bounds.x, bounds.y + bounds.h], // Bottom-left\r\n      [bounds.x + bounds.w, bounds.y + bounds.h], // Bottom-right\r\n    ].map(([x, y]) => this.tileAtPixelPos({\r\n      x: x + xo,\r\n      y: y + yo,\r\n    }));\r\n  }\r\n}\r\n","import { ContainerUpdateBehaviour } from './ContainerUpdateBehaviour';\r\nimport { UpdateBehaviour } from './UpdateBehaviour';\r\nimport { Camera } from '../entities/Camera';\r\n\r\nexport class CameraBehaviour extends ContainerUpdateBehaviour implements UpdateBehaviour {\r\n  update(dt: number, t: number, entity: Camera): void {\r\n    super.update(dt, t, entity);\r\n\r\n    if (entity.subject) {\r\n      entity.focus();\r\n    }\r\n  }\r\n}\r\n","import { Container } from './Container';\r\nimport { Dimensions, Coordinates } from '../types';\r\nimport { Entity } from './Entity';\r\nimport { Sprite } from './Sprite';\r\nimport { math } from '../utils/math';\r\nimport { CameraBehaviour } from '../behaviours/CameraBehaviour';\r\nimport { Vec } from '../utils/Vec';\r\n\r\nexport class Camera extends Container {\r\n  worldSize: Dimensions;\r\n  subject: Coordinates | Vec;\r\n  offset: Coordinates;\r\n\r\n  constructor(\r\n    subject: Entity | Coordinates, viewport: Dimensions, worldSize: Dimensions = viewport,\r\n  ) {\r\n    super();\r\n    this.w = viewport.w;\r\n    this.h = viewport.h;\r\n    this.worldSize = worldSize;\r\n    this.updateBehaviour = new CameraBehaviour();\r\n\r\n    this.setSubject(subject);\r\n  }\r\n\r\n  setSubject(e: Entity | Coordinates) {\r\n    if (e) {\r\n      this.subject = e instanceof Entity ? e.pos : e;\r\n    } else {\r\n      this.subject = this.pos;\r\n    }\r\n\r\n    this.offset = { x: 0, y: 0 };\r\n\r\n    // Center on the entity\r\n    if (e instanceof Entity) {\r\n      this.offset.x += e.w / 2;\r\n      this.offset.y += e.h / 2;\r\n    }\r\n\r\n    if (e instanceof Sprite) {\r\n      this.offset.x -= e.anchor.x;\r\n      this.offset.y -= e.anchor.y;\r\n    }\r\n\r\n    this.focus();\r\n  }\r\n\r\n  focus() {\r\n    const {\r\n      pos, w, h, worldSize, subject, offset,\r\n    } = this;\r\n\r\n    const centeredX = subject.x + offset.x - w / 2;\r\n    const maxX = worldSize.w - w;\r\n    const x = -math.clamp(centeredX, 0, maxX);\r\n\r\n    const centeredY = subject.y + offset.y - h / 2;\r\n    const maxY = worldSize.h - h;\r\n    const y = -math.clamp(centeredY, 0, maxY);\r\n\r\n    pos.x = x;\r\n    pos.y = y;\r\n  }\r\n}\r\n","import { Entity } from '../entities/Entity';\r\nimport { TileMap } from '../entities/TileMap';\r\nimport { entity } from '../utils/entity';\r\n\r\nexport const deadInTracks = (ent: Entity, map: TileMap, x = 0, y = 0) => {\r\n  const bounds = entity.bounds(ent);\r\n  const tiles = map.tilesAtCorners(bounds, x, y);\r\n  const walks = tiles.map(t => t && t.frame.walkable);\r\n  const blocked = walks.some(w => !w);\r\n  if (blocked) {\r\n    x = 0;\r\n    y = 0;\r\n  }\r\n  return { x, y };\r\n};\r\n","import { Entity } from '../entities/Entity';\r\nimport { TileMap } from '../entities/TileMap';\r\nimport { entity } from '../utils/entity';\r\n\r\nexport const wallSlide = (ent: Entity, map: TileMap, x = 0, y = 0) => {\r\n  let tiles;\r\n  let tileEdge;\r\n  const bounds = entity.bounds(ent);\r\n  const hits = {\r\n    up: false, down: false, left: false, right: false,\r\n  };\r\n\r\n  // Final amounts of movement to allow\r\n  let xo = x;\r\n  let yo = y;\r\n\r\n  // Check vertical movement\r\n  if (y !== 0) {\r\n    tiles = map.tilesAtCorners(bounds, 0, yo);\r\n    const [tl, tr, bl, br] = tiles.map(t => t && t.frame.walkable);\r\n\r\n    // Hit your head\r\n    if (y < 0 && !(tl && tr)) {\r\n      hits.up = true;\r\n      tileEdge = tiles[0].pos.y + tiles[0].h;\r\n      yo = tileEdge - bounds.y;\r\n    }\r\n    // Hit your feet\r\n    if (y > 0 && !(bl && br)) {\r\n      hits.down = true;\r\n      tileEdge = tiles[2].pos.y - 1;\r\n      yo = tileEdge - (bounds.y + bounds.h);\r\n    }\r\n  }\r\n\r\n  // Check horizontal movement\r\n  if (x !== 0) {\r\n    tiles = map.tilesAtCorners(bounds, xo, yo);\r\n    const [tl, tr, bl, br] = tiles.map(t => t && t.frame.walkable);\r\n\r\n    // Hit left tile\r\n    if (x < 0 && !(tl && bl)) {\r\n      hits.left = true;\r\n      tileEdge = tiles[0].pos.x + tiles[0].w;\r\n      xo = tileEdge - bounds.x;\r\n    }\r\n    // Hit right tile\r\n    if (x > 0 && !(tr && br)) {\r\n      hits.right = true;\r\n      tileEdge = tiles[1].pos.x - 1;\r\n      xo = tileEdge - (bounds.x + bounds.w);\r\n    }\r\n  }\r\n\r\n  // xo & yo contain the amount we're allowed to move by, and any hit tiles\r\n  return { x: xo, y: yo, hits };\r\n};\r\n","export class State<T> {\r\n  last: T;\r\n  state: T;\r\n  time: number;\r\n  justSetState: boolean;\r\n  first: boolean;\r\n\r\n  constructor(state: T) {\r\n    this.set(state);\r\n  }\r\n\r\n  set(state: T) {\r\n    this.last = this.state;\r\n    this.state = state;\r\n    this.time = 0;\r\n    this.justSetState = true;\r\n    this.first = true;\r\n  }\r\n\r\n  get() {\r\n    return this.state;\r\n  }\r\n\r\n  update(dt: number) {\r\n    this.first = this.justSetState;\r\n    this.time += this.first ? 0 : dt;\r\n    this.justSetState = false;\r\n  }\r\n\r\n  is(state: T) {\r\n    return this.state === state;\r\n  }\r\n\r\n  isIn(...states: T[]) {\r\n    return states.some(s => this.is(s));\r\n  }\r\n}\r\n","import { Entity } from '../entities/Entity';\nimport { Vec } from './Vec';\n\nconst applyForce = (e: Entity, force: Vec) => {\n  const { acc, mass = 1 } = e;\n  acc.x += force.x / mass;\n  acc.y += force.y / mass;\n};\n\nconst applyFriction = (e: Entity, amount: number) => {\n  const friction = e.vel.clone().multiply(-1).normalize().multiply(amount);\n  applyForce(e, friction);\n};\n\nconst applyHorizontalFriction = (e: Entity, amount: number) => {\n  const friction = e.vel\n    .clone()\n    .multiply(-1)\n    .normalize()\n    .multiply(amount);\n  applyForce(e, { x: friction.x, y: 0 } as Vec);\n};\n\nconst applyImpulse = (e: Entity, force: Vec, dt: number) => {\n  applyForce(e, { x: force.x / dt, y: force.y / dt } as Vec);\n};\n\nconst integrate = (e: Entity, dt: number) => {\n  const { vel, acc } = e;\n  const vx = vel.x + acc.x * dt;\n  const vy = vel.y + acc.y * dt;\n  const x = (vel.x + vx) / 2 * dt;\n  const y = (vel.y + vy) / 2 * dt;\n  vel.set(vx, vy);\n  acc.set(0, 0);\n  return { x, y } as Vec;\n};\n\nconst integratePos = (e: Entity, dt: number) => {\n  const dis = integrate(e, dt);\n  e.pos.add(dis);\n  return dis;\n};\n\nconst speed = ({ vel }: Entity) => Math.sqrt(vel.x * vel.x + vel.y * vel.y);\n\nexport const physics = {\n  applyForce,\n  applyImpulse,\n  integrate,\n  integratePos,\n  speed,\n  applyFriction,\n  applyHorizontalFriction,\n};\n","import { SoundOptions } from './SoundTypes';\nimport { Assets } from '../Assets';\n\nexport class Sound {\n  src: string;\n  options: SoundOptions;\n  audio: HTMLAudioElement;\n  playing: boolean;\n\n  constructor(src: string, options: SoundOptions = {}) {\n    this.playing = false;\n    this.src = src;\n    this.options = { volume: 1, ...options };\n\n    // Configure audio element\n    const audio = Assets.sound(src);\n    audio.src = src;\n    if (options.loop) {\n      audio.loop = true;\n    }\n    audio.addEventListener(\n      'error',\n      () => {\n        throw Error(`Error loading audio: ${src}`);\n      },\n      false,\n    );\n\n    audio.addEventListener(\n      'ended',\n      () => {\n        this.playing = false;\n      },\n      false,\n    );\n    this.audio = audio;\n  }\n\n  play(overrides: SoundOptions = {}) {\n    const { audio, options } = this;\n    const opts: SoundOptions = { time: 0, ...options, ...overrides };\n    audio.volume = opts.volume;\n    audio.currentTime = opts.time;\n    audio.play();\n    this.playing = true;\n  }\n\n  stop() {\n    this.audio.pause();\n    this.playing = false;\n  }\n\n  get volume() {\n    return this.audio.volume;\n  }\n\n  set volume(volume) {\n    this.options.volume = this.audio.volume = volume;\n  }\n}\n","\nimport { Sound } from './Sound';\nimport { SoundOptions } from './SoundTypes';\n\nexport class SoundPool {\n  count: number;\n  sounds: Sound[];\n\n  constructor(src: string, options: SoundOptions = {}, poolSize = 3) {\n    this.count = 0;\n    this.sounds = [...Array(poolSize)]\n      .map(() => new Sound(src, options));\n  }\n\n  // play one of audio instance of the pool\n  play(options: SoundOptions) {\n    const { sounds } = this;\n    const index = this.count++ % sounds.length;\n    sounds[index].play(options);\n  }\n\n  // stop ALL audio instance of the pool\n  stop() {\n    this.sounds.forEach(sound => sound.stop());\n  }\n}","import { Sound } from './Sound';\nimport { SoundOptions } from './SoundTypes';\nimport { math } from '~gamelib/utils/math';\n\nexport class SoundGroup {\n  sounds: Sound[];\n\n  constructor(sounds: Sound[]) {\n    this.sounds = sounds;\n  }\n\n  // play one of the audio group (random)\n  play(opts: SoundOptions = {}) {\n    const { sounds } = this;\n    math.randOneFrom(sounds).play(opts);\n  }\n\n  // stop ALL audio instance of the group\n  stop() {\n    this.sounds.forEach(sound => sound.stop());\n  }\n}\n","export * from './renderer/CanvasRenderer';\r\nexport * from './entities/Container';\r\nexport * from './entities/Texture';\r\nexport * from './entities/Sprite';\r\nexport * from './entities/Text';\r\nexport * from './entities/Rect';\r\nexport * from './controls/KeyControls';\r\nexport * from './controls/MouseControls';\r\nexport * from './behaviours/UpdateBehaviour';\r\nexport * from './behaviours/ContainerUpdateBehaviour';\r\nexport * from './types/index';\r\nexport * from './game';\r\nexport * from './utils/math';\r\nexport * from './utils/entity';\r\nexport * from './entities/TileMap';\r\nexport * from './entities/TileSprite';\r\nexport * from './entities/Camera';\r\nexport * from './movement/deadInTracks';\r\nexport * from './movement/wallSlide';\r\nexport * from './State';\r\nexport * from './utils/Vec';\r\nexport * from './utils/physics';\r\nexport * from './sounds/Sound';\r\nexport * from './sounds/SoundPool';\r\nexport * from './sounds/SoungGroup';\r\nexport * from './Assets';\r\n","import {\n  Texture, TileSprite, Vec, UpdateBehaviour, math, physics,\n} from '~gamelib';\n\nimport img from '../res/crash_test.png';\n\nconst texture = new Texture(img);\n\nexport class CrashTestDummy extends TileSprite {\n  vel: Vec;\n  bounds: { x: number; y: number; w: number; h: number; };\n  onBounce: (t: number) => void;\n  time: number;\n  radius: number;\n\n  constructor(bounds: { x: number, y: number, w: number, h: number }) {\n    super(texture, 48, 48);\n    this.pivot = { x: 24, y: 24 };\n    this.radius = 24;\n    this.frame.x = math.rand(4);\n    this.vel = new Vec();\n    this.acc = new Vec();\n    this.bounds = bounds;\n    this.rotation = math.rand(4) * (Math.PI / 2);\n\n    this.updateBehaviour = new CrashTestDummyBehaviour();\n  }\n}\n\nclass CrashTestDummyBehaviour implements UpdateBehaviour {\n  update(dt: number, t: number, entity: CrashTestDummy): void {\n    const {\n      pos, vel, bounds, w, h,\n    } = entity;\n\n    if (math.randOneIn(500)) {\n      const MAX_POWER = 500;\n      physics.applyImpulse(\n        entity,\n        {\n          x: math.rand(-MAX_POWER, MAX_POWER),\n          y: math.rand(-MAX_POWER, MAX_POWER),\n        } as Vec,\n        dt,\n      );\n    }\n\n    physics.applyFriction(entity, 100);\n    physics.integratePos(entity, dt);\n\n    // Bounce off the walls\n    if (pos.x < 0 || pos.x > bounds.w - w) {\n      vel.x *= -1;\n      pos.x = pos.x < 0 ? 0 : bounds.w - w;\n    }\n    if (pos.y < 0 || pos.y > bounds.h - h) {\n      vel.y *= -1;\n      pos.y = pos.y < 0 ? 0 : bounds.h - h;\n    }\n  }\n}\n","import {\n  Container, KeyControls, Game, Text, math, ContainerUpdateBehaviour, UpdateBehaviour,\n} from '~gamelib';\n\nimport { CrashTestDummy } from './entities/CrashTestDummy';\n\nexport class GameScreen extends Container {\n  controls: KeyControls;\n  ctd: CrashTestDummy;\n  timer: Text;\n  time: number;\n  running: boolean;\n  bounds: { x: number; y: number; w: number; h: number; };\n  balls: Container;\n\n  constructor(game: Game, controls: KeyControls) {\n    super();\n    this.w = game.w;\n    this.h = game.h;\n    this.controls = controls;\n\n    this.bounds = { x: 0, y: 0, w: this.w, h: this.h };\n\n    this.balls = this.add(new Container());\n    for (let i = 0; i < 40; i++) {\n      const b = this.balls.add(new CrashTestDummy(this.bounds));\n      b.pos.set(math.rand(32, this.w - 64), math.rand(32, this.h - 64));\n    }\n\n    this.updateBehaviour = new GameScreenBehaviour();\n  }\n}\n\n\nclass GameScreenBehaviour extends ContainerUpdateBehaviour implements UpdateBehaviour {\n  update(dt: number, t: number, entity: GameScreen): void {\n    super.update(dt, t, entity);\n\n    const balls = entity.balls.children;\n    for (let i = 0; i < balls.length; i++) {\n      const a = balls[i] as CrashTestDummy;\n\n      for (let j = i + 1; j < balls.length; j++) {\n        const b = balls[j] as CrashTestDummy;\n        const diff = b.pos.clone().subtract(a.pos);\n        if (diff.mag() > a.radius + b.radius) {\n          continue;\n        }\n        const mid = a.pos.clone().add(b.pos).divide(2);\n        const normal = diff.normalize();\n\n        a.pos.set(mid.x - normal.x * a.radius, mid.y - normal.y * a.radius);\n        b.pos.set(mid.x + normal.x * b.radius, mid.y + normal.y * a.radius);\n\n        let power = (a.vel.x - b.vel.x) * normal.x;\n        power += (a.vel.y - b.vel.y) * normal.y;\n\n        const displacement = normal.multiply(power);\n        a.vel.subtract(displacement);\n        b.vel.add(displacement);\n      }\n    }\n  }\n}\n","import { Game, KeyControls } from '~gamelib';\n\nimport { GameScreen } from './GameScreen';\n\nconst game = new Game(800, 500);\nconst keys = new KeyControls();\nfunction startGame() {\n  game.scene = new GameScreen(game, keys);\n}\nstartGame();\ngame.run();\n"]}